#–ò–ú–ü–û–†–¢–´
from telebot import types
from dotenv import load_dotenv
from logging.handlers import RotatingFileHandler
from logic import get_user, save_user, update_user
from logic import *
from weather import get_weather
from datetime import datetime, timezone
from zoneinfo import ZoneInfo


import logging
import time
import os
import requests
import telebot
import re
import json


#–®–ò–§–†–û–í–ê–ù–ò–ï
load_dotenv()


#–ü–ï–†–ï–ú–ï–ù–ù–´–ï
bot_start_time = time.time()
rounded_time = datetime.fromtimestamp(round(bot_start_time), timezone.utc)


#–õ–û–ì–ò–†–û–í–ê–ù–ò–ï
LOG_DIR = "logs"
LOG_FILE = os.path.join(LOG_DIR, "bot.log")

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"

bot_logger = logging.getLogger("bot_logger")
bot_logger.setLevel(logging.DEBUG)
bot_logger.propagate = False 

if bot_logger.hasHandlers():
    bot_logger.handlers.clear()

file_handler = RotatingFileHandler(LOG_FILE, maxBytes=10 * 1024 * 1024, backupCount=5, encoding="utf-8")
file_handler.setFormatter(logging.Formatter(LOG_FORMAT))
file_handler.setLevel(logging.DEBUG)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
console_handler.setLevel(logging.DEBUG)

error_handler = logging.FileHandler(os.path.join(LOG_DIR, "errors_bot.log"), encoding="utf-8")
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(logging.Formatter(LOG_FORMAT))

bot_logger.addHandler(file_handler)
bot_logger.addHandler(console_handler)
bot_logger.addHandler(error_handler)

bot_logger.debug("üîç DEBUG-–ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
bot_logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")


#–¢–û–ö–ï–ù –ë–û–¢–ê
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
bot = telebot.TeleBot(BOT_TOKEN)


#–§–£–ù–ö–¶–ò–ò
def track_bot_message(message):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
    update_data_field("last_bot_message", message.chat.id, message.message_id)


@bot.message_handler(func=lambda message: not message.text.startswith("/") and message.text not in menu_actions)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è""" 
    bot_logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}.")
    user_id = message.from_user.id
    chat_id = message.chat.id
    active_sessions[user_id] = chat_id 
    if message.date < bot_start_time:
        return
    if is_valid_command(message.text):  
        if message.text in menu_actions:
            menu_actions[message.text](message)
    else:
        bot_logger.info(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∏—á—å. –í–µ–∂–ª–∏–≤–æ –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        bot.send_message(chat_id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é!")
        send_main_menu(message.chat.id)


"""–û–¢–ü–†–ê–í–ö–ê –ú–ï–ù–Æ"""
def menu_option(chat_id, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    menu_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    update_data_field("last_menu_message", chat_id, menu_message.message_id)
    return menu_message.message_id


def settings_option(chat_id, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings_opt = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=reply_markup)
    update_data_field("last_menu_message", chat_id, settings_opt.message_id)
    return settings_opt.message_id


def send_main_menu(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    delete_last_menu_message(chat_id)
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    main_keyboard.row("üåé –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
    main_keyboard.row("üë• –î—Ä—É–∑—å—è", "üé≠ –ü—Ä–æ—Ñ–∏–ª—å")
    main_keyboard.row("üå§ Deus Pass", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    menu_option(chat_id, reply_markup=main_keyboard)


def send_settings_menu(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    delete_last_menu_message(chat_id)
    settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    settings_keyboard.row("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    settings_keyboard.row("üå¶ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
    settings_keyboard.row("‚Ü© –ù–∞–∑–∞–¥")
    settings_option(chat_id, reply_markup=settings_keyboard)


def delete_last_menu_message(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞."""
    message_id = get_data_field("last_menu_message", chat_id)
    if message_id:
        try:
            bot.delete_message(chat_id, message_id)
            update_data_field("last_menu_message", chat_id, None)
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω—é-—Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data in ["forecast_today", "forecast_tomorrow", "forecast_week"])
def forecast_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏ –Ω–µ–¥–µ–ª—é —Å —É—á—ë—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)
    menu_message_id = call.message.message_id
    if not user or not user.preferred_city:
        bot.send_message(chat_id, "‚ö† –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return
    if call.data == "forecast_today":
        forecast_data = [get_today_forecast(user.preferred_city, user)]
    elif call.data == "forecast_tomorrow":
        forecast_data = [get_tomorrow_forecast(user.preferred_city, user)]
    else:
        forecast_data = get_weekly_forecast(user.preferred_city, user)
    if not forecast_data or None in forecast_data:
        bot.send_message(chat_id, "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
        return
    try:
        forecast_text = "\n\n".join([format_forecast(day, user) for day in forecast_data]) + "\n\n      ‚ü™ Deus Weather ‚ü´"
    except KeyError as e:
        bot_logger.error(f"–ö–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        send_main_menu(chat_id)
        return
    try:
        bot.edit_message_text(
            forecast_text,
            chat_id,
            menu_message_id,
            parse_mode="HTML",
            reply_markup=None
        )
        update_data_field("last_bot_message", chat_id, None)
    except Exception as e:
        bot_logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        msg = bot.send_message(chat_id, forecast_text, parse_mode="HTML")
        update_data_field("last_bot_message", chat_id, msg.message_id)
    bot_logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}.")
    send_main_menu(chat_id)


def format_forecast(day, user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tracked_params = decode_tracked_params(user.tracked_weather_params)
    parts = [
        f"<b>{day['day_name']}, {day['date']}</b>",
        "‚îÄ" * min(len(f"{day['day_name']}, {day['date']}"), 21)
    ]
    if tracked_params.get("description", False) and "description" in day:
        parts.append(f"‚ñ∏ –ü–æ–≥–æ–¥–∞: {day['description']}")
    if tracked_params.get("temperature", False) and "temp_min" in day and "temp_max" in day:
        temp_unit = UNIT_TRANSLATIONS['temp'][user.temp_unit]
        temp_min = round(convert_temperature(day['temp_min'], user.temp_unit))
        temp_max = round(convert_temperature(day['temp_max'], user.temp_unit))
        if temp_min == temp_max:
            parts.append(f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}{temp_unit}")
        else:
            parts.append(f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {temp_min}{temp_unit} –¥–æ {temp_max}{temp_unit}")
    if tracked_params.get("feels_like", False) and "feels_like" in day:
        temp_unit = UNIT_TRANSLATIONS['temp'][user.temp_unit]
        parts.append(
            f"‚ñ∏ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(convert_temperature(day['feels_like'], user.temp_unit))}{temp_unit}"
        )
    if tracked_params.get("humidity", False) and "humidity" in day:
        parts.append(f"‚ñ∏ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%")
    if tracked_params.get("precipitation", False) and "precipitation" in day:
        parts.append(f"‚ñ∏ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['precipitation']}%")
    if tracked_params.get("pressure", False) and "pressure" in day:
        parts.append(
            f"‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ: {round(convert_pressure(day['pressure'], user.pressure_unit))} "
            f"{UNIT_TRANSLATIONS['pressure'][user.pressure_unit]}"
        )
    if tracked_params.get("wind_speed", False) and "wind_speed" in day:
        parts.append(
            f"‚ñ∏ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {round(convert_wind_speed(day['wind_speed'], user.wind_speed_unit))} "
            f"{UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}"
        )
    if tracked_params.get("wind_direction", False) and "wind_direction" in day:
        direction = get_wind_direction(day['wind_direction'])
        parts.append(f"‚ñ∏ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {direction} ({day['wind_direction']}¬∞)")
    if tracked_params.get("wind_gust", False) and "wind_gust" in day:
        parts.append(
            f"‚ñ∏ –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞: {round(convert_wind_speed(day['wind_gust'], user.wind_speed_unit))} "
            f"{UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}"
        )
    if tracked_params.get("clouds", False) and "clouds" in day:
        parts.append(f"‚ñ∏ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {day['clouds']}%")
    if tracked_params.get("visibility", False) and "visibility" in day:
        parts.append(f"‚ñ∏ –í–∏–¥–∏–º–æ—Å—Ç—å: {int(day['visibility'])} –º")
    return "\n".join(parts)


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_id = call.message.chat.id
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥': {e}")
    last_command_message = get_data_field("last_user_command", chat_id)
    if last_command_message:
        try:
            bot.delete_message(chat_id, last_command_message)
            update_data_field("last_user_command", chat_id, None)
            bot_logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {last_command_message}")
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    delete_last_menu_message(chat_id)
    send_settings_menu(chat_id)


@safe_execute
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_menu_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    chat_id = message.chat.id
    update_data_field("last_settings_command", chat_id, message.message_id)
    bot_logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω ID –∫–æ–º–∞–Ω–¥—ã '–ù–∞—Å—Ç—Ä–æ–π–∫–∏': {message.message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    delete_last_menu_message(chat_id)
    send_settings_menu(chat_id)


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = call.message.chat.id
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥': {e}")
    last_command_message = get_data_field("last_user_command", chat_id)
    if last_command_message:
        try:
            bot.delete_message(chat_id, last_command_message)
            update_data_field("last_user_command", chat_id, None)
        except Exception as e:
            bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    delete_last_menu_message(chat_id)
    send_main_menu(chat_id)


@bot.message_handler(commands=['start'])
def start(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start", message)
    user_id = message.from_user.id
    user = get_user(user_id)
    chat_id = message.chat.id
    delete_last_menu_message(chat_id)
    if user and user.preferred_city:
        back_reply_text = (f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n"
                      f"–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}.")
        msg = bot.reply_to(message, back_reply_text)  
        update_data_field("last_bot_message", chat_id, msg.message_id)
        send_main_menu(message.chat.id)
    else:
        save_user(user_id, message.from_user.first_name)
        new_reply_text = (f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                      "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
        msg = bot.reply_to(message, new_reply_text)
        update_data_field("last_bot_message", chat_id, msg.message_id)
        bot.register_next_step_handler(msg, process_new_city_registration) 
    bot_logger.info(f"‚ñ∏ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


@safe_execute
@bot.message_handler(commands=['weather'])
def weather(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    (message)
    user_id = message.from_user.id
    user = get_user(user_id)
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather –æ—Ç {user_id}.")
    if not user or not user.preferred_city:
        bot_logger.info(f"‚ñ∏ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥.")
        reply = bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥!")
        bot.register_next_step_handler(reply, process_new_city)
        return
    delete_last_menu_message(message.chat.id)
    weather_data = get_weather(user.preferred_city)
    if not weather_data:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
        send_main_menu(message.chat.id)
        return
    bot_logger.info(f"‚ñ∏ –ü–æ–≥–æ–¥–∞ –≤ {user.preferred_city} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")
    weather_info = format_weather_data(weather_data, user)
    bot.reply_to(message, weather_info, parse_mode="HTML")
    send_main_menu(message.chat.id)


@safe_execute
@bot.message_handler(regexp=r"^(\/changecity|üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥)$")
def changecity(message):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = get_user(user_id)
    chat_id = message.chat.id
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /changecity –æ—Ç {user_id}.")
    delete_last_menu_message(chat_id)
    reply_text = (f"‚ñ∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}. \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
                  if user and user.preferred_city else
                  "–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥! \n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.")
    keyboard = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("‚úñ –û—Ç–º–µ–Ω–∞", callback_data="cancel_changecity")
    keyboard.add(cancel_button)
    reply = bot.reply_to(message, reply_text, reply_markup=keyboard)
    update_data_field("last_menu_message", chat_id, reply.message_id)
    update_data_field("last_user_command", chat_id, message.message_id)
    bot.register_next_step_handler(reply, process_new_city, show_menu=True)


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "cancel_changecity")
def cancel_changecity_callback(call):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    chat_id = call.message.chat.id
    bot_logger.info(f"‚ñ∏ –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞': {e}")
    last_command_message = get_data_field("last_user_command", chat_id)
    if last_command_message:
        try:
            bot.delete_message(chat_id, last_command_message)
            update_data_field("last_user_command", chat_id, None)
        except Exception as e:
            bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /changecity: {e}")
    bot.clear_step_handler_by_chat_id(chat_id)
    send_settings_menu(chat_id)


@safe_execute
@bot.message_handler(func=lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notification_settings(message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = get_user(message.from_user.id)
    chat_id = message.chat.id
    bot_logger.info(f"‚ñ∏ –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    delete_last_menu_message(chat_id)
    update_data_field("last_user_command", chat_id, message.message_id)
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        keyboard = generate_notification_settings_keyboard(user)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:", reply_markup=keyboard, reply_to_message_id=message.message_id)
    except Exception as e:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –≤ notification_settings: {e}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_notification_"))
def toggle_notification(call):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)
    setting_key = call.data.replace("toggle_notification_", "")
    bot_logger.info(f"‚ñ∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({setting_key}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}.")
    if not user:
        bot_logger.error(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {call.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return 
    try:
        notification_settings = decode_notification_settings(user.notifications_settings)
    except Exception as e:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        notification_settings = {
            "weather_threshold_notifications": True,
            "forecast_notifications": True,
            "bot_notifications": True
        }
    if setting_key in notification_settings:
        notification_settings[setting_key] = not notification_settings[setting_key]
    else:
        bot_logger.warning(f"‚ñ∏ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä {setting_key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
        return
    try:
        update_user(user.user_id, notifications_settings=json.dumps(notification_settings))
        new_keyboard = generate_notification_settings_keyboard(get_user(call.from_user.id))  
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=new_keyboard)
    except Exception as e:
        bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ notifications_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
    bot.answer_callback_query(call.id)


@safe_execute
@bot.message_handler(regexp=r"^(\üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã|/weatherforecast)$")
def forecast_menu_handler(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    chat_id = message.chat.id
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
    delete_last_menu_message(chat_id)
    msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=generate_forecast_keyboard())
    update_data_field("last_user_command", chat_id, {"message_id": message.message_id, "command": message.text})
    update_data_field("last_bot_message", chat_id, msg.message_id)
    return msg.message_id


@bot.callback_query_handler(func=lambda call: call.data == "back_from_forecast_menu")
def back_from_forecast_menu(call):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = call.message.chat.id
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
    last_command_data = get_data_field("last_user_command", chat_id)
    bot_logger.debug(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º: {last_command_data}")
    if last_command_data:
        last_command = last_command_data.get("command")
        if last_command in ["üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", "/weatherforecast"]:
            try:
                bot.delete_message(chat_id, last_command_data["message_id"])
                update_data_field("last_user_command", chat_id, None)
            except Exception as e:
                bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    send_main_menu(chat_id)


@safe_execute
def refresh_daily_forecast(user_id):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç–µ."""
    last_forecast_id = get_data_field("last_daily_forecast", user_id)
    if last_forecast_id:
        try:
            bot.delete_message(chat_id=user_id, message_id=last_forecast_id)
            bot_logger.info(f"‚ñ∏ –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except Exception as del_error:
            bot_logger.warning(f"‚ñ∏ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {del_error}")
    user = get_user(user_id)
    if not user or not user.preferred_city:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–ª–∏ –µ–≥–æ –≥–æ—Ä–æ–¥.")
        return
    raw_forecast = get_today_forecast(user.preferred_city, user)
    if not raw_forecast:
        bot_logger.warning(f"‚ñ∏ `get_today_forecast` –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.preferred_city}!")
        return
    user_tz = ZoneInfo(user.timezone) if user.timezone else ZoneInfo("UTC")
    user_time = datetime.now().astimezone(user_tz)
    updated_time = user_time.strftime("%H:%M")
    forecast_message = (
        "<blockquote>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</blockquote>\n"
        f"[–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {updated_time}]\n"
        + format_forecast(raw_forecast, user)
        + "\n\n      ‚ü™ Deus Weather ‚ü´"
    )
    try:
        sent_message = bot.send_message(
            user_id, forecast_message, parse_mode="HTML"
        )
        update_data_field("last_daily_forecast", user_id, sent_message.message_id)
        bot_logger.info(f"‚ñ∏ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        try:
            bot.pin_chat_message(
                chat_id=user_id,
                message_id=sent_message.message_id,
                disable_notification=True,
            )
            bot_logger.info(f"‚ñ∏ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except Exception as pin_error:
            bot_logger.warning(f"‚ñ∏ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {pin_error}")
    except Exception as e:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {user_id}: {e}")


@safe_execute
def update_existing_forecast(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ."""
    last_forecast_id = get_data_field("last_daily_forecast", user_id)
    user = get_user(user_id)
    if not user or not user.preferred_city:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–ª–∏ –µ–≥–æ –≥–æ—Ä–æ–¥.")
        return
    raw_forecast = get_today_forecast(user.preferred_city, user)
    if not raw_forecast:
        bot_logger.warning(f"‚ñ∏ `get_today_forecast` –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.preferred_city}!")
        return
    user_tz = ZoneInfo(user.timezone) if user.timezone else ZoneInfo("UTC")
    user_time = datetime.now().astimezone(user_tz)
    updated_time = user_time.strftime("%H:%M")
    forecast_message = (
        "<blockquote>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</blockquote>\n"
        f"[–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {updated_time}]\n"
        + format_forecast(raw_forecast, user)
        + "\n\n      ‚ü™ Deus Weather ‚ü´"
    )
    if last_forecast_id:
        try:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=last_forecast_id,
                text=forecast_message,
                parse_mode="HTML"
            )
            bot_logger.info(f"‚ñ∏ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            return
        except Exception as edit_error:
            bot_logger.warning(f"‚ñ∏ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {edit_error}")
        try:
            bot.delete_message(chat_id=user_id, message_id=last_forecast_id)
            bot_logger.info(f"‚ñ∏ –°—Ç–∞—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except Exception as del_error:
            bot_logger.warning(f"‚ñ∏ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {del_error}")
    try:
        sent_message = bot.send_message(
            user_id, forecast_message, parse_mode="HTML"
        )
        update_data_field("last_daily_forecast", user_id, sent_message.message_id)
        bot_logger.info(f"‚ñ∏ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        try:
            bot.pin_chat_message(
                chat_id=user_id,
                message_id=sent_message.message_id,
                disable_notification=True,
            )
            bot_logger.info(f"‚ñ∏ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except Exception as pin_error:
            bot_logger.warning(f"‚ñ∏ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {pin_error}")
    except Exception as e:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")


@safe_execute
def format_settings(param, reply_to=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    if isinstance(param, int):
        chat_id = param
    else:
        chat_id = param.chat.id
        reply_to = param.message_id if reply_to is None else reply_to
    try:
        update_data_field("last_user_command", chat_id, reply_to)
    except Exception as e:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ last_user_command –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    last_menu_id = get_data_field("last_menu_message", chat_id)
    if last_menu_id:
        try:
            bot.delete_message(chat_id, last_menu_id)
            update_data_field("last_menu_message", chat_id, None)
        except Exception as e:
            bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    user = get_user(chat_id)
    if not user:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ format_settings()")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    header = f"–°–µ–π—á–∞—Å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä—è—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ–ª–∏—á–∏–Ω–∞—Ö:"
    separator = "‚îÄ" * min(len(header), 21)
    text = (
        f"{header}\n"
        f"{separator}\n"
        f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {UNIT_TRANSLATIONS['temp'][user.temp_unit]}\n"
        f"‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ: {UNIT_TRANSLATIONS['pressure'][user.pressure_unit]}\n"
        f"‚ñ∏ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}\n"
        f"{separator}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è:"
    )
    menu_message_id = get_data_field("last_format_settings_menu", chat_id)
    try:
        if menu_message_id:
            bot.edit_message_text(text, chat_id, menu_message_id, reply_markup=generate_format_keyboard())
            bot_logger.info(f"‚ñ∏ –ú–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        else:
            raise KeyError("–ú–µ–Ω—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try:
            msg = bot.send_message(chat_id, text, reply_markup=generate_format_keyboard(), reply_to_message_id=reply_to)
            update_data_field("last_format_settings_menu", chat_id, msg.message_id)
            bot_logger.info(f"‚ñ∏ –ù–æ–≤–æ–µ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
        except Exception as send_error:
            bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "return_to_format_settings")
def return_to_format_settings(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_user_command."""
    chat_id = call.message.chat.id
    user = get_user(chat_id)
    if not user:
        bot_logger.error(f"‚ñ∏ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    header = f"–°–µ–π—á–∞—Å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä—è—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ–ª–∏—á–∏–Ω–∞—Ö:"
    separator = "‚îÄ" * min(len(header), 21)
    text = (
        f"{header}\n"
        f"{separator}\n"
        f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {UNIT_TRANSLATIONS['temp'][user.temp_unit]}\n"
        f"‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ: {UNIT_TRANSLATIONS['pressure'][user.pressure_unit]}\n"
        f"‚ñ∏ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}\n"
        f"{separator}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è:"
    )
    try:
        bot.edit_message_text(
            text,
            chat_id,
            call.message.message_id,
            reply_markup=generate_format_keyboard(),
            parse_mode="HTML"
        )
        bot_logger.info(f"‚ñ∏ –ú–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    except Exception as e:
        bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è: {e}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "format_settings")
def format_settings_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    format_settings(call.message)


@safe_execute
def feature_in_development(message):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    chat_id = message.chat.id
    delete_last_menu_message(chat_id)
    if message.text == "üé≠ –ü—Ä–æ—Ñ–∏–ª—å": 
        feature_name = "–ø—Ä–æ—Ñ–∏–ª—è"
    elif message.text == "üå§ Deus Pass":
        feature_name = "–ø–æ–¥–ø–∏—Å–∫–∏"
    else:
        feature_name = "–¥—Ä—É–∑–µ–π"
    bot.reply_to(message, f"‚ÄºÔ∏è –§—É–Ω–∫—Ü–∏—è {feature_name} –≤—Å—ë –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª {feature_name}, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    send_main_menu(chat_id)


@safe_execute
@bot.message_handler(func=lambda message: message.text == "‚Ü© –ù–∞–∑–∞–¥")
def settings_back_to_main_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚Ü© –ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    chat_id = message.chat.id
    delete_last_menu_message(chat_id)
    last_settings_message_id = get_data_field("last_settings_command", chat_id)
    if last_settings_message_id:
        try:
            bot.delete_message(chat_id, last_settings_message_id)
            update_data_field("last_settings_command", chat_id, None)
            bot_logger.info(f"‚ñ∏ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {last_settings_message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        except Exception as e:
            bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    try:
        bot.delete_message(chat_id, message.message_id)
    except Exception as e:
        bot_logger.warning(f"‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '‚Ü© –ù–∞–∑–∞–¥': {e}")
    send_main_menu(chat_id)


@safe_execute
@bot.message_handler(func=lambda message: message.text == "üå¶ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
def weather_data_settings(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    chat_id = message.chat.id
    user = get_user(message.from_user.id)
    delete_last_menu_message(chat_id)         
    update_data_field("last_user_command", chat_id, message.message_id)
    bot_logger.info(f"‚ñ∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã: {message.message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    if not user:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:"
    try:
        keyboard = generate_weather_data_keyboard(user)
        bot.send_message(chat_id, text, reply_markup=keyboard, reply_to_message_id=message.message_id)
        bot_logger.info(f"‚ñ∏ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_weather_param_"))
def toggle_weather_param(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"""
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)
    param = call.data.replace("toggle_weather_param_", "")
    if not user:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        current_params = decode_tracked_params(user.tracked_weather_params)
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        current_params = {key: True for key in [
            "description", "temperature", "humidity", "precipitation",
            "pressure", "wind_speed", "visibility", "feels_like",
            "clouds", "wind_direction", "wind_gust"
        ]}
    if param not in current_params:
        bot_logger.warning(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä {param} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
        return
    current_params[param] = not current_params[param]
    bot_logger.info(f"‚ñ∏ –ü–∞—Ä–∞–º–µ—Ç—Ä {param} –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ {current_params[param]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
    try:
        update_user(user.user_id, tracked_weather_params=json.dumps(current_params))
        updated_user = get_user(call.from_user.id)  
        new_keyboard = generate_weather_data_keyboard(updated_user)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=new_keyboard)
        bot_logger.info(f"‚úÖ UI –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.")
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ tracked_weather_params –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")


@safe_execute
@bot.message_handler(func=lambda message: message.text in menu_actions)
def menu_handler(message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    menu_actions[message.text](message)
menu_actions = {
    "üåé –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è": weather,
    "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã": forecast_menu_handler,
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": lambda msg: send_settings_menu(msg.chat.id),
    "üë• –î—Ä—É–∑—å—è": feature_in_development,
    "üé≠ –ü—Ä–æ—Ñ–∏–ª—å": feature_in_development,
    "üå§ Deus Pass": feature_in_development,
    "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥": changecity,
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": notification_settings,
    "‚Ü© –ù–∞–∑–∞–¥": settings_back_to_main_menu,
    "üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è": lambda msg: format_settings(msg),
    "üå¶ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": generate_weather_data_keyboard
}


@safe_execute
@bot.message_handler(commands=['help'])
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ—é—â–∏–º–∏—Å—è —É –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    user_id = message.from_user.id
    user = get_user(user_id)
    bot_logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    help_text = (
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "‚ñ∏ /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "‚ñ∏ /weather ‚Äî –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n"
        "‚ñ∏ /changecity ‚Äî –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.\n"
        "‚ñ∏ /weatherforecast ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.\n"
        "‚ñ∏ /help ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    bot_logger.info(f"‚ñ∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
    bot.reply_to(message, help_text)


@safe_execute
def process_new_city(message, show_menu=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≥–æ—Ä–æ–¥–æ–º."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    city = message.text.strip()
    def error_reply(text):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥."""
        keyboard = types.InlineKeyboardMarkup()
        cancel_button = types.InlineKeyboardButton("‚úñ –û—Ç–º–µ–Ω–∞", callback_data="cancel_changecity")
        keyboard.add(cancel_button)
        last_menu_id = get_data_field("last_menu_message", chat_id)
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=last_menu_id,
                text=f"{text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
            reply = bot.reply_to(message, text, reply_markup=keyboard)
            bot.register_next_step_handler(reply, process_new_city, show_menu)
            return
        bot.register_next_step_handler(message, process_new_city, show_menu)
    if city == "/start":
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start –≤–º–µ—Å—Ç–æ –≥–æ—Ä–æ–¥–∞.")
        start(message)
        return
    if city.startswith("/") or not city:
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city}.")
        error_reply("‚ÄºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!")
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$', city):
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: {city}.")
        error_reply("‚ÄºÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã!")
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return
    updated = update_user_city(user_id, city, message.from_user.username)
    if updated:
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –≥–æ—Ä–æ–¥ –Ω–∞ {city}.")
        success_text = f"–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}!"
    else:
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {city}.")
        success_text = f"–≥.{city} –æ—Å—Ç–∞–ª—Å—è –≤–∞—à–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º."
    last_menu_id = get_data_field("last_menu_message", chat_id)
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=last_menu_id,
            text=success_text,
            parse_mode="HTML"
        )
        update_data_field("last_menu_message", chat_id, None)
        update_existing_forecast(user_id)
    except Exception as e:
        bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.reply_to(message, success_text)
    try:
        bot.delete_message(chat_id, message.message_id)
    except Exception as e:
        bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    if show_menu:
        send_settings_menu(chat_id)


@safe_execute
def process_new_city_registration(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    city = message.text.strip()
    def error_reply(text):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã."""
        last_bot_msg_id = get_data_field("last_bot_message", chat_id)
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=last_bot_msg_id,
                text=f"{text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                parse_mode="HTML"
            )
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            bot.register_next_step_handler(message, process_new_city_registration)
            return
        bot.register_next_step_handler(message, process_new_city_registration)
    if city == "/start":
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start –≤–º–µ—Å—Ç–æ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        start(message)
        return
    if city.startswith("/") or not city:
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city}.")
        error_reply("‚ÄºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!")
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$', city):
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: {city}.")
        error_reply("‚ÄºÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã!")
        try:
            bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return
    updated = update_user_city(user_id, city, message.from_user.username)
    bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –≥–æ—Ä–æ–¥: {city}.")

    success_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}."
    last_bot_msg_id = get_data_field("last_bot_message", chat_id)
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=last_bot_msg_id,
            text=success_text,
            parse_mode="HTML"
        )
        update_data_field("last_bot_message", chat_id, None)
        refresh_daily_forecast(chat_id)
    except Exception as e:
        bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    try:
        bot.delete_message(chat_id, message.message_id)
    except Exception as e:
        bot_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    send_main_menu(chat_id)


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data in ["change_temp_unit", "change_pressure_unit", "change_wind_speed_unit"])
def change_unit_menu(call):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user = get_user(user_id)
    unit_type = call.data[len("change_"):-len("_unit")]
    display_names = {
        "temp": "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        "pressure": "–¥–∞–≤–ª–µ–Ω–∏—è",
        "wind_speed": "—Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞"
    }
    display_text = display_names.get(unit_type, unit_type)
    current_unit = getattr(user, f"{unit_type}_unit", "N/A")
    bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {display_text} (—Ç–µ–∫—É—â–∞—è: {current_unit}).")
    try:
        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è {display_text}:",
            chat_id,
            call.message.message_id,
            reply_markup=generate_unit_selection_keyboard(current_unit, unit_type)
        )
        update_data_field("last_bot_message", chat_id, call.message.message_id)
    except Exception as e:
        bot_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@safe_execute
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_"))
def set_unit(call):
    """–ò–∑–º–µ–Ω—è–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ –º–µ–Ω—é –¥–æ –Ω–∞–∂–∞—Ç–∏—è '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    data = call.data[len("set_"):] 
    try:
        unit_type, new_unit = data.split("_unit_", 1)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {call.data}, {e}")
        return
    bot_logger.debug(f"set_unit: call.from_user.id={user_id}, data={call.data}, unit_type={unit_type}, new_unit={new_unit}")
    user = get_user(user_id)
    if not user:
        bot_logger.error(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ set_unit().")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    update_user_unit(user_id, unit_type, new_unit)
    bot_logger.debug(f"–ï–¥–∏–Ω–∏—Ü—ã {unit_type} –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {new_unit} –¥–ª—è user_id={user_id}")

    user = get_user(user_id)
    new_keyboard = generate_unit_selection_keyboard(getattr(user, f"{unit_type}_unit"), unit_type)
    try:   
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=new_keyboard)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")


def clear_old_updates():
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updates = bot.get_updates(offset=-1)
    if updates:
        last_update_id = updates[-1].update_id
        bot_logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ [offset {last_update_id + 1}]")


if __name__ == '__main__':
    bot_logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    clear_old_updates()

    MAX_RETRIES = 10
    attempt = 1  

    while attempt <= MAX_RETRIES:
        try:
            bot_logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
            bot.polling(timeout=10, long_polling_timeout=10, allowed_updates=["message", "callback_query"])
        except requests.exceptions.ReadTimeout:
            bot_logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: Read timeout. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        except requests.exceptions.ConnectionError as e:
            bot_logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        except Exception as e:
            bot_logger.critical(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        finally:
            attempt += 1
            time.sleep(5)

    bot_logger.critical("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫! –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
