#–ò–ú–ü–û–†–¢–´
from telebot import types
from dotenv import load_dotenv
from logging.handlers import RotatingFileHandler
from handlers import *
from logic import active_sessions

import logging
import os
import requests
import time
import telebot

#–¢–ï–ö–£–©–ê–Ø –°–ï–°–°–ò–Ø

#–®–ò–§–†–û–í–ê–ù–ò–ï
load_dotenv()
bot_start_time = time.time()

#–õ–û–ì–ò–†–û–í–ê–ù–ò–ï
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

if not os.path.exists("logs"):
    os.makedirs("logs")

LOG_FILE = "logs/bot.log"
LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"

file_handler = RotatingFileHandler(LOG_FILE, maxBytes=1_000_000, backupCount=5, encoding="utf-8")
file_handler.setFormatter(logging.Formatter(LOG_FORMAT))
file_handler.setLevel(logging.DEBUG)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
console_handler.setLevel(logging.INFO)

logging.basicConfig(level=logging.DEBUG, handlers=[file_handler, console_handler])

#–î–ï–®–ò–§–†–û–í–ö–ê –ò –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê –ë–û–¢–ê
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

conversation_id = {}

#–û–¢–ü–†–ê–í–ö–ê –ú–ï–ù–Æ
def send_menu(user_id, text, buttons):
    chat_id = active_sessions.get(user_id)
    if not chat_id:
        logging.error(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ chat_id –¥–ª—è user_id {user_id}")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for row in buttons:
        keyboard.row(*row)

    bot.send_message(chat_id, text, reply_markup=keyboard)

def send_main_menu(chat_id):
    buttons = [["üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"], ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]]
    send_menu(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", buttons)

def send_settings_menu(chat_id):
    buttons = [["üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"], ["üìè –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"], ["‚Ü™Ô∏è –ù–∞–∑–∞–¥"]]
    send_menu(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", buttons)

#–û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    active_sessions[message.from_user.id] = message.chat.id
    user_id = message.from_user.id
    chat_id = message.chat.id
    active_sessions[user_id] = chat_id

    commands_map = {
        "/start": start,
        "/help": help_command,
        "/weather": weather,
        "/changecity": changecity,
        "üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É": weather,
        "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã": forecast_menu,
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": send_settings_menu,
        "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥": changecity,
        "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": notifications_settings,
        "üìè –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö": format_settings,
        "‚Ü™Ô∏è –ù–∞–∑–∞–¥": send_main_menu
    }

    if active_sessions.get(user_id) != chat_id:
        active_sessions[user_id] = chat_id
        logging.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω chat_id –¥–ª—è user_id {user_id}: {chat_id}")

    if message.text in commands_map:
        commands_map[message.text](message)
    else:
        bot.send_message(chat_id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é!")

#–ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    MAX_RETRIES = 10
    attempt = 1  

    while attempt <= MAX_RETRIES:
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
            bot.infinity_polling(timeout=10, long_polling_timeout=10)
        except requests.exceptions.ReadTimeout:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: Read timeout. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        except requests.exceptions.ConnectionError as e:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        except Exception as e:
            logging.critical(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        finally:
            attempt += 1
            time.sleep(5)

    logging.critical("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫! –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")  
