import telebot
from telebot import types
from weather import get_weather
from weather import get_weekly_forecast, get_today_forecast
import logging
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import User, Base
import re
import os
from dotenv import load_dotenv
import requests
import time

load_dotenv()
bot_start_time = time.time()

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine)

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

conversation_id = {}

def safe_execute(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            user_id = args[0].from_user.id if args else None
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {str(e)}")
            if user_id:
                bot.reply_to(args[0],
                             "–£–ø—Å.. –ü–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ~o~")
    return wrapper

def get_user(user_id):
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()
    db.close()
    return user

def save_user(user_id, username=None, preferred_city=None):
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        user = User(user_id=user_id, username=username, preferred_city=preferred_city)
        db.add(user)
        db.commit()
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        if preferred_city:
            user.preferred_city = preferred_city
        if username:
            user.username = username
        db.commit()
        logging.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} ({username}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    db.close()

def log_action(action, message):
    user = message.from_user
    log_message = (f"{action} | Time: {datetime.now().isoformat()} | "
                   f"User ID: {user.id} | Username: {user.first_name or ''} {user.last_name or ''} | "
                   f"Message: {message.text}")
    logging.debug(log_message)

def update_conversation(user_id):
    conversation_id[user_id] = conversation_id.get(user_id, 0) + 1
    logging.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω conversation_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {conversation_id[user_id]}")
    return conversation_id[user_id]

def send_main_menu(chat_id):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    main_keyboard.row("üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
    main_keyboard.row("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    loading_message = bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    bot.delete_message(chat_id, loading_message.message_id)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_keyboard)

def send_settings_menu(chat_id):
    settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    settings_keyboard.row("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    settings_keyboard.row("‚Ü™Ô∏è –ù–∞–∑–∞–¥")
    loading_message = bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∑–∫–∞...")
    bot.delete_message(chat_id, loading_message.message_id)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=settings_keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["forecast_today", "forecast_week", "back_to_main"])
def forecast_handler(call):
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)

    if call.data == "forecast_today":
        forecast = get_today_forecast(user.preferred_city)
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f"üå§ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{forecast}", parse_mode="Markdown")
    
    elif call.data == "forecast_week":
        forecast = get_weekly_forecast(user.preferred_city)
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=forecast, parse_mode="Markdown")
    
    elif call.data == "back_to_main":
        bot.delete_message(chat_id, call.message.message_id) 
        send_main_menu(chat_id)

@bot.message_handler(func=lambda message: message.date < bot_start_time)
def ignore_old_messages(message):
    logging.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
    return

pending_city_users = {}  
awaiting_city_users = set() 

@safe_execute
@bot.message_handler(commands=['start'])
def start(message):
    log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start", message)
    user_id = message.from_user.id
    user = get_user(user_id)

    if user and user.preferred_city:
        reply_text = (f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n"
                      f"–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}.")
        bot.reply_to(message, reply_text)
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        send_main_menu(message.chat.id)

    else:
        save_user(user_id, message.from_user.first_name)
        reply_text = (f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                      "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
        msg = bot.reply_to(message, reply_text)
        bot.register_next_step_handler(msg, lambda m: process_new_city(m))
        logging.debug(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –ó–∞–ø—Ä–æ—à–µ–Ω –≥–æ—Ä–æ–¥.")

@safe_execute
@bot.message_handler(commands=['weather'])
def weather(message):
    user_id = message.from_user.id
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    user = get_user(user_id)
    if not user or not user.preferred_city:
        logging.debug(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥.")
        reply = bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥!")
        bot.register_next_step_handler(reply, process_new_city)
    else:
        city = user.preferred_city
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∏–º–µ–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: '{city}'.")
        weather_info = get_weather(city)
        if weather_info:
            bot.reply_to(message, weather_info)
            logging.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
        else:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'.")
            logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    
    send_main_menu(message.chat.id)

@safe_execute
@bot.message_handler(commands=['changecity'])
def changecity(message):
    user_id = message.from_user.id
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /changecity –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    user = get_user(user_id)
    if user and user.preferred_city:
        reply = bot.reply_to(message, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}. \n"
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    else:
        reply = bot.reply_to(message, "–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥! \n"
                             "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.")
    bot.register_next_step_handler(reply, lambda m: process_new_city(m, show_menu=True))

@safe_execute
@bot.message_handler(func=lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notifications_settings(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user = get_user(user_id)
    if user:
        current_status = "–í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
        status_message = (f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                          f"\n"
                          f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_status}.\n"
                          f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –≤ –≥.{user.preferred_city}?")
    else:
        status_message = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row("‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    keyboard.row("‚Ü™Ô∏è –ù–∞–∑–∞–¥")
    
    bot.send_message(chat_id, status_message, reply_markup=keyboard)
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")


@safe_execute
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
def toggle_notifications(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()
    if user:
        if message.text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            user.notifications_enabled = True
        else:
            user.notifications_enabled = False
        db.commit()
        current_status = "–í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
        response_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω—ã!"
        f"\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_status}."
        bot.send_message(chat_id, response_text)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response_text}")
    else:
        bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å /start.")
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    db.close()
    send_settings_menu(chat_id)

@safe_execute
@bot.message_handler(func=lambda message: message.text in ["üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚Ü™Ô∏è –ù–∞–∑–∞–¥"])
def menu_handler(message):
    if message.text == "üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
        weather(message)
    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        send_settings_menu(message.chat.id)
    elif message.text == "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        changecity(message)
    elif message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        notifications_settings(message)
    elif message.text == "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
        send_main_menu(message.chat.id)

@safe_execute
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.\n"
        "/changecity - –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    bot.reply_to(message, help_text)
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

@safe_execute
def process_new_city(message, show_menu=False):
    user_id = message.from_user.id
    city = message.text.strip()

    if city == "/start":
        start(message)
        return

    if city.startswith("/") or not city:
        reply = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!")
        bot.register_next_step_handler(reply, lambda m: process_new_city(m, show_menu))
        return

    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$', city):
        reply = bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã!")
        bot.register_next_step_handler(reply, lambda m: process_new_city(m, show_menu))
        return

    user = get_user(user_id)
    if user:
        if user.preferred_city == city:
            bot.reply_to(message, f"–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ - —ç—Ç–æ {city}!")
        else:
            save_user(user_id, preferred_city=city)
            bot.reply_to(message, f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}.")
    else:
        save_user(user_id, username=message.from_user.username, preferred_city=city)
        bot.reply_to(message, f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}.")

    send_main_menu(message.chat.id)

@safe_execute
@bot.message_handler(func=lambda message: message.text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
def forecast_menu(message):
    chat_id = message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üå§ –°–µ–≥–æ–¥–Ω—è", callback_data="forecast_today"))
    keyboard.add(types.InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data="forecast_week"))
    keyboard.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)

if __name__ == '__main__':
    logging.debug("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    attempt = 1 
    while True:
        try:
            logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
            bot.polling(none_stop=True, timeout=10, long_polling_timeout=10)
        except requests.exceptions.ReadTimeout:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API –∏—Å—Ç–µ–∫–ª–æ (Read timeout).")
        except requests.exceptions.ConnectionError as e:
            if "NameResolutionError" in str(e):
                logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–¥—Ä–µ—Å 'api.telegram.org' (Name resolution failed).")
            else:
                logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
        except Exception as e:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ polling: {e}")
        finally:
            attempt += 1
            time.sleep(5)
