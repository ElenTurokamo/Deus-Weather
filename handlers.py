from bot import bot, send_main_menu, send_settings_menu
from logic import get_user, safe_execute, get_today_forecast, get_weekly_forecast, save_user, log_action, format_weather
from logic import toggle_user_notifications, update_user_city, generate_forecast_keyboard, generate_format_keyboard, generate_unit_selection_keyboard, update_user_unit
from weather import get_weather
from telebot import types

import logging
import re

#–û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ì–ù–û–ó–û–í –ü–û–ì–û–î–´ (–°–ï–ì–û–î–ù–Ø/–ù–ï–î–ï–õ–Ø)
@safe_execute
@bot.callback_query_handler(func=lambda call: call.data in ["forecast_today", "forecast_week"])
def forecast_handler(call):
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)

    if not user or not user.preferred_city:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    if call.data == "forecast_today":
        forecast_data = [get_today_forecast(user.preferred_city)]
    else:
        forecast_data = get_weekly_forecast(user.preferred_city) 

    if not forecast_data or None in forecast_data:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
        return

    forecast_text = "\n".join([
        f"‚ú¶ *{day['date']}*\n"
        f"‚ñ∏ –ü–æ–≥–æ–¥–∞: {day['description']}\n"
        f"‚ñ∏ –û—Å–∞–¥–∫–∏: {day['precipitation']}%\n"
        f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {round(day['temp_min'])}¬∞{user.temp_unit} "
        f"–¥–æ {round(day['temp_max'])}¬∞{user.temp_unit}\n"
        f"‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ: {round(day['pressure'])} {user.pressure_unit}\n"
        f"‚ñ∏ –í–µ—Ç–µ—Ä: {round(day['wind_speed'])} {user.wind_speed_unit}\n"
        for day in forecast_data
    ])

    bot.send_message(chat_id, f"üìÜ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:*\n\n{forecast_text}", parse_mode="Markdown")
    send_main_menu(chat_id)

#–ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def back_to_settings_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    if call.message.reply_to_message:
        bot.delete_message(chat_id, call.message.reply_to_message.message_id)  
    send_settings_menu(chat_id)

@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "settings_menu")
def settings_menu_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    send_settings_menu(chat_id)

@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main_callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    send_main_menu(chat_id)

#–ö–û–ú–ê–ù–î–´
@safe_execute
@bot.message_handler(commands=['start'])
def start(message):
    log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start", message)
    user_id = message.from_user.id
    user = get_user(user_id)

    if user and user.preferred_city:
        reply_text = (f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n"
                      f"–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}.")
        send_main_menu(message.chat.id)
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    else:
        save_user(user_id, message.from_user.first_name)
        msg = bot.reply_to(message, 
                           f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                           "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
        bot.register_next_step_handler(msg, process_new_city)
        logging.debug(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –ó–∞–ø—Ä–æ—à–µ–Ω –≥–æ—Ä–æ–¥.")

@safe_execute
@bot.message_handler(commands=['weather'])
def weather(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user or not user.preferred_city:
        reply = bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥!")
        bot.register_next_step_handler(reply, process_new_city)
        return

    weather_data = get_weather(user.preferred_city)
    if not weather_data:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
        return

    weather_info = format_weather(
        weather_data["city_name"],
        weather_data["temp"],
        weather_data["description"],
        weather_data["humidity"],
        weather_data["wind_speed"],
        weather_data["pressure"],
        weather_data["visibility"],
        user.temp_unit, user.pressure_unit, user.wind_speed_unit
    )

    bot.reply_to(message, weather_info)
    send_main_menu(message.chat.id)

@safe_execute
@bot.message_handler(commands=['changecity'])
def changecity(message):
    log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /changecity", message)
    user = get_user(message.from_user.id)

    reply_text = (f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ ‚Äî {user.preferred_city}. \n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
                  if user and user.preferred_city else
                  "–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥! \n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.")

    reply = bot.reply_to(message, reply_text)
    bot.register_next_step_handler(reply, process_new_city, show_menu=True)

@safe_execute
@bot.message_handler(func=lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notifications_settings(message):
    log_action("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", message)
    
    user = get_user(message.from_user.id)
    current_status = "–í–∫–ª—é—á–µ–Ω—ã" if user and user.notifications_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    status_message = (f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                      f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                      f"- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n"
                      f"- –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.\n\n"
                      f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_status}.")

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications"))
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications"))
    keyboard.add(types.InlineKeyboardButton("‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings"))

    bot.send_message(message.chat.id, status_message, reply_markup=keyboard)

@safe_execute
@bot.callback_query_handler(func=lambda call: call.data in ["enable_notifications", "disable_notifications"])
def toggle_notifications(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    new_status = call.data == "enable_notifications"
    updated_status = toggle_user_notifications(user_id, new_status)

    if updated_status is None:
        bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ /start.")
        return

    current_status = "–í–∫–ª—é—á–µ–Ω—ã" if updated_status else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    log_action(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_status}", call.message)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications"))
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications"))
    keyboard.add(types.InlineKeyboardButton("‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings"))

    bot.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                          f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                          f"- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n"
                          f"- –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.\n\n"
                          f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_status}.", 
                          chat_id, call.message.message_id, reply_markup=keyboard)

"""–û–¢–ö–†–´–¢–ò–ï –ú–ï–ù–Æ –í–´–ë–û–†–ê –î–ê–ù–ù–´–•"""
@safe_execute
@bot.callback_query_handler(func=lambda call: call.data == "format_settings")
def format_settings(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    message_id = call.message.message_id

    user = get_user(user_id)
    if not user:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return

    text = (f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {user.temp_unit}\n"
            f"‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ: {user.pressure_unit}\n"
            f"‚ñ∏ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {user.wind_speed_unit}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")

    bot.edit_message_text(text, chat_id, message_id, reply_markup=generate_format_keyboard())

@safe_execute
@bot.message_handler(func=lambda message: message.text in menu_actions)
def menu_handler(message):
    menu_actions[message.text](message)

menu_actions = {
    "üå¶ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É": weather,
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": lambda msg: send_settings_menu(msg.chat.id),
    "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥": changecity,
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": notifications_settings,
    "‚Ü™Ô∏è –ù–∞–∑–∞–¥": lambda msg: send_main_menu(msg.chat.id),
    "üìè –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö": format_settings
}

@safe_execute
@bot.message_handler(commands=['help'])
def help_command(message):
    log_action("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help", message)
    
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.\n"
        "/changecity - –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

    bot.reply_to(message, help_text)

@safe_execute
def process_new_city(message, show_menu=False):
    user_id = message.from_user.id
    city = message.text.strip()

    def error_reply(text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥."""
        reply = bot.reply_to(message, text)
        bot.register_next_step_handler(reply, process_new_city, show_menu)

    if city == "/start":
        start(message)
        return
    if city.startswith("/") or not city:
        error_reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É!")
        return
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+$', city):
        error_reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã!")
        return

    updated = update_user_city(user_id, city, message.from_user.username)
    bot.reply_to(message, f"–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}." if updated else f"–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}.")

    if show_menu:
        send_main_menu(message.chat.id)

@safe_execute
@bot.message_handler(func=lambda message: message.text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
def forecast_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=generate_forecast_keyboard())

from logic import generate_format_keyboard

"""–û–¢–ö–†–´–¢–ò–ï –ú–ï–ù–Æ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –§–û–†–ú–ê–¢–ê –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø"""
@safe_execute
@bot.callback_query_handler(func=lambda call: call.data in ["change_temp_unit", "change_pressure_unit", "change_wind_speed_unit"])
def change_unit_menu(call):
    chat_id = call.message.chat.id
    user = get_user(call.from_user.id)

    unit_type = call.data.split("_")[-2]
    current_unit = getattr(user, f"{unit_type}_unit", "N/A")

    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è {unit_type}:", 
                          chat_id, call.message.message_id, 
                          reply_markup=generate_unit_selection_keyboard(current_unit, unit_type))

@safe_execute
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_"))
def set_unit(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    _, unit_type, _, new_unit = call.data.split("_") 
    update_user_unit(user_id, unit_type, new_unit) 

    change_unit_menu(call)