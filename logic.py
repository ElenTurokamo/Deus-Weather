from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy import create_engine
from sqlalchemy.sql import func
from sqlalchemy.pool import QueuePool
from telebot import types
from weather import fetch_today_forecast, fetch_weekly_forecast, fetch_tomorrow_forecast, get_city_timezone
from models import User, LocalVars
from datetime import date, timedelta, datetime, timezone
from zoneinfo import ZoneInfo

import os
import logging
import importlib
import json
import threading

#–°–õ–û–í–ê–†–ò
UNIT_TRANSLATIONS = {
    "temp": {"C": "¬∞C", "F": "¬∞F", "K": "–ö", "ICE": "üç¶"},
    "pressure": {"mmHg": "–º–º —Ä—Ç.", "mbar": "–º–±–∞—Ä", "hPa": "–≥–ü–∞", "inHg": "–¥—é–π–º. —Ä—Ç."},
    "wind_speed": {"m/s": "–º/—Å", "km/h": "–∫–º/—á", "mph": "–º–∏–ª—å/—á"}
}

MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

WEEKDAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

WIND_DIRECTIONS = {
    (337.5, 360): "–°–µ–≤–µ—Ä",
    (0, 22.5): "–°–µ–≤–µ—Ä",
    (22.5, 67.5): "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ–∫",
    (67.5, 112.5): "–í–æ—Å—Ç–æ–∫",
    (112.5, 157.5): "–Æ–≥–æ-–í–æ—Å—Ç–æ–∫",
    (157.5, 202.5): "–Æ–≥",
    (202.5, 247.5): "–Æ–≥–æ-–ó–∞–ø–∞–¥",
    (247.5, 292.5): "–ó–∞–ø–∞–¥",
    (292.5, 337.5): "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥"
}

BAD_WEATHER_DESCRIPTIONS = [
    "–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥—ë–º", "–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥—ë–º", "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥—ë–º",
    "–°–ª–∞–±–∞—è –≥—Ä–æ–∑–∞", "–ì—Ä–æ–∑–∞", "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞", "–ù–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è –≥—Ä–æ–∑–∞",
    "–ì—Ä–æ–∑–∞ —Å –ª—ë–≥–∫–æ–π –º–æ—Ä–æ—Å—å—é", "–ì—Ä–æ–∑–∞ —Å –º–æ—Ä–æ—Å—å—é", "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω–æ–π –º–æ—Ä–æ—Å—å—é",

    "–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å", "–ú–æ—Ä–æ—Å—å", "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    "–õ—ë–≥–∫–∏–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å", "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å", "–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å",
    "–õ–∏–≤–µ–Ω—å –∏ –º–æ—Ä–æ—Å—å", "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å –∏ –º–æ—Ä–æ—Å—å", "–ú–æ—Ä–æ—Å—è—â–∏–π –ª–∏–≤–µ–Ω—å",

    "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    "–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å", "–õ–∏–≤–µ–Ω—å", "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å", "–ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–π –ª–∏–≤–µ–Ω—å",

    "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥", "–°–Ω–µ–≥", "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    "–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥", "–°–ª–∞–±—ã–π –ª–∏–≤–µ–Ω—å —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º", "–õ–∏–≤–µ–Ω—å —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º",
    "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º", "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
    "–°–ª–∞–±—ã–π –ª–∏–≤–µ–Ω—å —Å–æ —Å–Ω–µ–≥–æ–º", "–õ–∏–≤–µ–Ω—å —Å–æ —Å–Ω–µ–≥–æ–º", "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å —Å–æ —Å–Ω–µ–≥–æ–º",
]

WEATHER_EMOJI_MAP = {
    "–≥—Ä–æ–∑–∞": "üå©",
    "–º–æ—Ä–æ—Å—å": "üå´",
    "–¥–æ–∂–¥—å": "‚òîÔ∏è",
    "–ª–∏–≤–µ–Ω—å": "üåß",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üåÅ",
}

SEVERITY_MAP = {
    "–≥—Ä–æ–∑–∞": 5,
    "—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å": 4,
    "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥": 4,
    "–ª–∏–≤–µ–Ω—å": 3,
    "–¥–æ–∂–¥—å": 2,
    "–º–æ—Ä–æ—Å—å": 1,
}


#–í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL, poolclass=QueuePool, pool_recycle=280, pool_pre_ping=True, echo=False)
SessionLocal = sessionmaker(bind=engine)

def update_user(user_id: int, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. kwargs - –ª—é–±—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."""
    logging.debug(f"–í—ã–∑–æ–≤ update_user —Å user_id={user_id} –∏ kwargs={kwargs}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    db: Session = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        db.close()
        return False
    for key, value in kwargs.items():
        if hasattr(user, key):
            logging.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è {key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {value}")
            setattr(user, key, value)
    try:
        db.commit()
        logging.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {kwargs}.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        db.rollback()
    finally:
        db.close()
    return True


def initialize_json_from_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç JSON-—Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î."""
    db = SessionLocal()
    all_vars = db.query(LocalVars).all()
    db.close()

    # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    data = {
        "last_menu_message": {},
        "last_settings_command": {},
        "last_user_command": {},
        "last_format_settings_menu": {},
        "last_bot_message": {},
        "last_daily_forecast": {},
        "last_weather_update": {},
        "stop_event": False
    }

    for vars_row in all_vars:
        uid = str(vars_row.user_id)
        data["last_menu_message"][uid] = vars_row.last_menu_message
        data["last_settings_command"][uid] = vars_row.last_settings_command
        data["last_user_command"][uid] = vars_row.last_user_command
        data["last_format_settings_menu"][uid] = vars_row.last_format_settings_menu
        data["last_bot_message"][uid] = vars_row.last_bot_message
        data["last_daily_forecast"][uid] = vars_row.last_daily_forecast
        data["last_weather_update"][uid] = vars_row.last_weather_update

    save_data(data)


def sync_json_to_db(user_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    db = SessionLocal()
    data = load_data()

    local_vars = db.query(LocalVars).filter(LocalVars.user_id == user_id).first()
    if not local_vars:
        local_vars = LocalVars(user_id=user_id)

    local_vars.last_menu_message = data.get("last_menu_message", {}).get(str(user_id))
    local_vars.last_settings_command = data.get("last_settings_command", {}).get(str(user_id))
    local_vars.last_user_command = data.get("last_user_command", {}).get(str(user_id))
    local_vars.last_format_settings_menu = data.get("last_format_settings_menu", {}).get(str(user_id))
    local_vars.last_bot_message = data.get("last_bot_message", {}).get(str(user_id))
    local_vars.last_daily_forecast = data.get("last_daily_forecast", {}).get(str(user_id))
    local_vars.last_weather_update = data.get("last_weather_update", {}).get(str(user_id))

    db.add(local_vars)
    db.commit()
    db.close()


#–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
def get_user(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –æ—Ç–∫—Ä—ã—Ç–æ–π."""
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()

    logging.debug(f"–í—ã–∑–æ–≤ get_user() —Å user_id={user_id} (–¢–∏–ø: {type(user_id)}) - {'–ù–∞–π–¥–µ–Ω' if user else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    db.close()
    return user
active_sessions = {}


#–ë–ï–ó–û–ü–ê–°–ù–´–ô –ò–ú–ü–û–†–¢ –ë–û–¢–ê
def get_bot():
    bot_module = importlib.import_module("bot")
    return bot_module.bot


#–°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
def save_user(user_id, username=None, preferred_city=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ."""
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        last_unique_id = db.query(func.max(User.unique_id)).scalar() or 100000000
        new_unique_id = last_unique_id + 1
        timezone = get_city_timezone(preferred_city) if preferred_city else "UTC"
        user = User(
            user_id=user_id,
            unique_id=new_unique_id,
            username=username,
            preferred_city=preferred_city,
            timezone=timezone
        )
        db.add(user)
        db.commit()
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω —Å unique_id {new_unique_id}.")
    else:
        if preferred_city:
            user.preferred_city = preferred_city
            user.timezone = get_city_timezone(preferred_city) or user.timezone 
        if username:
            user.username = username
        db.commit()
        logging.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} ({username}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    db.close()


#–î–ï–ö–û–î–ï–†–´ –ë–î
def decode_tracked_params(tracked_params):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∏–Ω–∞—á–µ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    default_params = {
        "description": True,
        "temperature": True,
        "feels_like": True,
        "humidity": True,
        "precipitation": True,
        "pressure": True,
        "wind_speed": True,
        "visibility": True,
        "wind_direction": False, 
        "wind_gust": False,     
        "clouds": False 
    }
    if isinstance(tracked_params, str):
        try:
            return json.loads(tracked_params)
        except json.JSONDecodeError:
            logging.warning("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_params
    elif isinstance(tracked_params, dict):
        return tracked_params
    else:
        logging.warning("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç tracked_params. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_params
    

def decode_notification_settings(notification_settings):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∏–Ω–∞—á–µ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    default_settings = {
        "bot_notifications": True,
        "forecast_notifications": True,
        "weather_threshold_notifications": False
    }
    if isinstance(notification_settings, str):
        try:
            return json.loads(notification_settings)
        except json.JSONDecodeError:
            logging.warning("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_settings
    elif isinstance(notification_settings, dict):
        return notification_settings
    else:
        logging.warning("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç notification_settings. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_settings


def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    with _lock:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
        

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with _lock:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)


#–û–ë–©–ï–ï –•–†–ê–ù–ò–õ–ò–©–ï –°–õ–û–í–ê–†–ï–ô
DATA_FILE = "data_store.json"
_lock = threading.Lock()
if not os.path.exists(DATA_FILE):
    initialize_json_from_db()
    if not os.path.exists(DATA_FILE): 
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump({
                "last_menu_message": {},
                "last_settings_command": {},
                "last_bot_message": {},
                "last_user_command": {},
                "last_daily_forecast": {},
                "last_format_settings_menu": {},
                "last_weather_update": {},
                "stop_event": False
            }, file, ensure_ascii=False, indent=4)


def get_data(key):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ –∫–ª—é—á—É."""
    data = load_data()
    return data.get(key, {})


def set_data(key, value, user_id=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    if user_id is not None:
        if key not in data:
            data[key] = {}
        data[key][str(user_id)] = value
    else:
        data[key] = value
    save_data(data)
    if user_id is not None:
        sync_json_to_db(user_id)

def update_data_field(dict_key, sub_key, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å –ë–î"""
    data = load_data()
    if dict_key not in data:
        data[dict_key] = {}
    data[dict_key][str(sub_key)] = value
    save_data(data)
    sync_json_to_db(int(sub_key))  


def get_data_field(dict_key, sub_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    data = load_data()
    return data.get(dict_key, {}).get(str(sub_key))


def is_stop_event_set():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ stop_event."""
    return get_data("stop_event")


def set_stop_event(value):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ stop_event."""
    set_data("stop_event", value)


#–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó –ë–î
def get_all_users(filter_notifications=True):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    db = SessionLocal()
    users = db.query(User).all()
    db.close()

    if filter_notifications:
        users = [
            user for user in users 
            if decode_notification_settings(user.notifications_settings).get("forecast_notifications", False)
        ]

    return users

#–ò–ó–ú–ï–ù–ï–ù–ò–ï –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø
def update_user_unit(user_id, unit_type, new_value):
    logging.debug(f"update_user_unit –≤—ã–∑–≤–∞–Ω —Å user_id={user_id}, unit_type={unit_type}, new_value={new_value}")
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == user_id).first()

    if user:
        if unit_type == "temp":
            user.temp_unit = new_value
        elif unit_type == "pressure":
            user.pressure_unit = new_value
        elif unit_type == "wind_speed":
            user.wind_speed_unit = new_value
        db.commit()
        db.close()  
    else:
        db.close() 

#–û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
def toggle_user_notifications(user_id, new_status):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å."""
    with SessionLocal() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        if not user:
            return None
        
        settings = decode_notification_settings(user.notifications_settings)
        settings["forecast_notifications"] = new_status
        user.notifications_settings = json.dumps(settings)
        session.commit()
        
        return settings["forecast_notifications"]

#–û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–û–†–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
def update_user_city(user_id, city, username=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    with SessionLocal() as db:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        user = db.query(User).filter(User.user_id == user_id).first()
        if user:
            if user.preferred_city == city:
                return False
            user.preferred_city = city
            user.timezone = get_city_timezone(city) or "UTC"
        else:
            user = User(
                user_id=user_id,
                username=username,
                preferred_city=city,
                timezone=get_city_timezone(city) or "UTC"
            )
            db.add(user)
        db.commit()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {city}, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî {user.timezone}.")
        return True

#–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø
def convert_temperature(value, unit):
    logging.debug(f"Converting {value} to {unit}")
    if unit == "C":
        return value
    elif unit == "F":
        return value * 9/5 + 32
    elif unit == "K":
        return value + 273.15
    elif unit == "ICE":
        return round(-value / 18, 1)

def convert_pressure(value, unit):
    logging.debug(f"Converting {value} to {unit}")
    conversions = {"mmHg": 0.75006, "mbar": 1, "hPa": 1, "inHg": 0.02953}
    return round(value * conversions[unit], 1)

def convert_wind_speed(value, unit):
    logging.debug(f"Converting {value} to {unit}")
    conversions = {"m/s": 1, "km/h": 3.6, "mph": 2.23694}
    return round(value * conversions[unit], 1)

def get_wind_direction(degree):
    for (start, end), direction in WIND_DIRECTIONS.items():
        if start <= degree < end:
            return direction
    return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"


#–ó–ê–©–ò–¢–ê –û–¢ –ö–†–ê–®–ê
def safe_execute(func):
    bot = get_bot()
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {str(e)} | –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}, {kwargs}")

            if args and hasattr(args[0], "chat"):
                bot.reply_to(args[0],
                             "–£–ø—Å... –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏!\n"
                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ ~o~")
    return wrapper


#–õ–û–ö–ê–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ –ë–û–¢–ê
def lazy_import_bot(func):
    def wrapper(*args, **kwargs):
        bot = importlib.import_module("bot") 
        return func(bot, *args, **kwargs) 
    return wrapper

#–õ–û–ì–ò–†–û–í–ê–ù–ò–ï
def log_action(action, message):
    user = message.from_user
    log_message = (f"{action} | Time: {datetime.now().isoformat()} | "
                   f"User ID: {user.id} | Username: {user.first_name or ''} {user.last_name or ''} | "
                   f"Message: {message.text}")
    logging.debug(log_message)

#–ö–õ–ê–í–ò–ê–¢–£–†–´
def generate_forecast_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üå§ –°–µ–≥–æ–¥–Ω—è", callback_data="forecast_today"))
    keyboard.add(types.InlineKeyboardButton("üåß –ó–∞–≤—Ç—Ä–∞", callback_data="forecast_tomorrow"))
    keyboard.add(types.InlineKeyboardButton("üìÜ –ù–µ–¥–µ–ª—è", callback_data="forecast_week"))
    keyboard.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_from_forecast_menu"))
    return keyboard

def generate_format_keyboard():
    """–ï–î–ò–ù–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø –î–ê–ù–ù–´–•"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="change_temp_unit"))
    keyboard.add(types.InlineKeyboardButton("–î–∞–≤–ª–µ–Ω–∏–µ", callback_data="change_pressure_unit"))
    keyboard.add(types.InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", callback_data="change_wind_speed_unit"))
    keyboard.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_settings"))
    return keyboard


def generate_weather_data_keyboard(user):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (2 —Å—Ç–æ–ª–±—Ü–∞)"""
    options = {
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
        "precipitation": "–®–∞–Ω—Å –æ—Å–∞–¥–∫–æ–≤",
        "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ",
        "wind_speed": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
        "visibility": "–í–∏–¥–∏–º–æ—Å—Ç—å",
        "feels_like": "–ú–Ω–∏–º–∞—è —Ç–µ–º-—Ä–∞",
        "clouds": "–û–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "wind_direction": "–ö—É—Ä—Å –≤–µ—Ç—Ä–∞",
        "wind_gust": "–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞"
    }

    tracked_params = decode_tracked_params(user.tracked_weather_params)
    keyboard = types.InlineKeyboardMarkup(row_width=2) 
    buttons = [
        types.InlineKeyboardButton(
            f"{'‚úÖ' if tracked_params.get(key, False) else ''} {label}",
            callback_data=f"toggle_weather_param_{key}"
        )
        for key, label in options.items()
    ]
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_settings"))
    return keyboard


def generate_notification_settings_keyboard(user):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    options = {
        "weather_threshold_notifications": "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã",
        "forecast_notifications": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑",
        "bot_notifications": "–ù–æ–≤–æ—Å—Ç–∏ –±–æ—Ç–∞"
    }

    notification_settings = decode_notification_settings(user.notifications_settings)
    keyboard = types.InlineKeyboardMarkup()

    for key, label in options.items():
        icon = "‚úÖ" if notification_settings.get(key, False) else ""
        keyboard.add(types.InlineKeyboardButton(f"{icon} {label}", callback_data=f"toggle_notification_{key}"))

    keyboard.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_settings"))
    return keyboard


"""–í–´–ë–û–† –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø"""
def generate_unit_selection_keyboard(current_value, unit_type):
    unit_options = {
        "temp": [("¬∞C (–¶–µ–ª—å—Å–∏–π)", "C"), ("¬∞F (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)", "F"), ("K (–ö–µ–ª—å–≤–∏–Ω)", "K"), ("–ú–æ—Ä–æ–∂–µ–Ω–∫–∏ (üç¶)", "ICE")],
        "pressure": [("–º–º —Ä—Ç. —Å—Ç.", "mmHg"), ("–º–±–∞—Ä", "mbar"), ("–≥–ü–∞", "hPa"), ("–¥—é–π–º. —Ä—Ç. —Å—Ç.", "inHg")],
        "wind_speed": [("–º/—Å", "m/s"), ("–∫–º/—á", "km/h"), ("–º–∏–ª—å/—á", "mph")]
    }

    keyboard = types.InlineKeyboardMarkup()
    for name, value in unit_options.get(unit_type, []):
        icon = " ‚úÖ" if current_value == value else ""
        keyboard.add(types.InlineKeyboardButton(f"{name}{icon}", callback_data=f"set_{unit_type}_unit_{value}"))

    keyboard.add(types.InlineKeyboardButton("‚Ü© –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="return_to_format_settings"))
    return keyboard


def format_weather_data(data, user):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á—ë—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JSON –∏–∑ tracked_weather_params.
    """
    tracked_params = decode_tracked_params(user.tracked_weather_params)

    temperature = convert_temperature(data["temp"], user.temp_unit)
    pressure = convert_pressure(data["pressure"], user.pressure_unit)
    wind_speed = convert_wind_speed(data["wind_speed"], user.wind_speed_unit)

    logging.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {data['temp']}¬∞ -> {temperature} {user.temp_unit}")
    logging.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {data['pressure']} -> {pressure} {user.pressure_unit}")
    logging.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {data['wind_speed']} -> {wind_speed} {user.wind_speed_unit}")

    header = f"–°–µ–π—á–∞—Å –≤ –≥.{data['city_name']}:"
    max_line_length = 21
    line = "‚îÄ" * min(len(header), max_line_length)
    
    weather_text = (
        f"<b>{header}</b>\n"
        f"{line}\n"
    )

    params = {
        "description": ("–ü–æ–≥–æ–¥–∞", data["description"].capitalize()),
        "temperature": ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{temperature:.1f}{UNIT_TRANSLATIONS['temp'][user.temp_unit]}"),
        "feels_like": ("–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫", f"{convert_temperature(data['feels_like'], user.temp_unit):.1f}{UNIT_TRANSLATIONS['temp'][user.temp_unit]}"),
        "humidity": ("–í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{data['humidity']}%"),
        "precipitation": ("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤", f"{data.get('precipitation', 0)}%"),
        "pressure": ("–î–∞–≤–ª–µ–Ω–∏–µ", f"{pressure:.1f} {UNIT_TRANSLATIONS['pressure'][user.pressure_unit]}"),
        "wind_speed": ("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", f"{wind_speed:.1f} {UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}"),
        "wind_direction": ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞", f"{get_wind_direction(data['wind_direction'])} ({data['wind_direction']}¬∞)"),
        "wind_gust": ("–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞", f"{convert_wind_speed(data['wind_gust'], user.wind_speed_unit):.1f} {UNIT_TRANSLATIONS['wind_speed'][user.wind_speed_unit]}"),
        "clouds": ("–û–±–ª–∞—á–Ω–æ—Å—Ç—å", f"{data['clouds']}%"),
        "visibility": ("–í–∏–¥–∏–º–æ—Å—Ç—å", f"{data['visibility']} –º")
    }

    for param, (label, value) in params.items():
        if tracked_params.get(param, False): 
            weather_text += f"‚ñ∏ {label}: {value}\n"

    return weather_text + "\nüçâ –ö–∞–∫–æ–π –±—ã –Ω–∏ –±—ã–ª–∞ –ø–æ–≥–æ–¥–∞ ‚Äî —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω!"


def format_change(label, old_value, new_value, unit=""):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π."""
    if old_value is None or old_value != new_value:
        arrow = "üìà" if new_value > old_value else "üìâ"
        return f"<b>{label}: {new_value}{unit} {arrow}</b>"
    return f"{label}: {new_value}{unit}"


#–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –û–°–ê–î–ö–û–í –í %
def convert_precipitation_to_percent(precipitation_mm):
    if precipitation_mm > 0:
        return min(int(precipitation_mm * 100), 100)  
    return 0


#–û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î
def is_valid_command(text):
    valid_commands = ["/start", "/weather", "/changecity", "üîÖ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    return text in valid_commands


#–ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–ì–û–î–ù–´–• –î–ê–ù–ù–´–•
def extract_weather_data(entry):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏ API"""
    temp = entry["main"]["temp"]
    feels_like = entry["main"].get("feels_like", temp)
    temp_min = entry["main"].get("temp_min", temp)
    temp_max = entry["main"].get("temp_max", temp)
    feels_like = entry["main"].get("feels_like", None)
    humidity = entry["main"].get("humidity", None)
    visibility = entry.get("visibility", None)
    pressure = entry["main"].get("pressure", None)
    wind_speed = entry["wind"].get("speed", None)
    wind_direction = entry["wind"].get("deg", None)
    wind_gust = entry["wind"].get("gust", None)
    clouds = entry["clouds"].get("all", None)
    description = entry["weather"][0]["description"].capitalize()
    precipitation = entry.get("pop", None)

    weather_data = {
        "temp": temp,
        "feels_like": feels_like,
        "temp_min": temp_min,
        "temp_max": temp_max,
        "feels_like": feels_like,
        "humidity": humidity,
        "visibility": visibility,
        "pressure": pressure,
        "wind_speed": wind_speed,
        "wind_direction": wind_direction,
        "wind_gust": wind_gust,
        "clouds": clouds,
        "description": description,
        "precipitation": round(precipitation * 100) if precipitation is not None else None
    }

    logging.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {weather_data}")
    return weather_data


#–ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–ì–ù–û–ó–ê –ü–û–ì–û–î–´
def get_today_forecast(city, user, target_date=None):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    raw_data = fetch_today_forecast(city)
    if not raw_data:
        return None

    tz = ZoneInfo(user.timezone or "UTC")
    now = datetime.now(tz)
    today = target_date or now.date()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–π –¥–∞—Ç–µ
    today_entries = [
        entry for entry in raw_data
        if datetime.fromtimestamp(entry["dt"], tz).date() == today
    ]

    if not today_entries:
        logging.warning(f"‚ö† –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–∞—Ç—É {today} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        return None
    
    descriptions = []
    for entry in today_entries:
        if "weather" in entry and entry["weather"]:
            descriptions.append(entry["weather"][0]["description"])

    # –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—É—é)
    today_data = min(today_entries, key=lambda entry: abs(datetime.fromtimestamp(entry["dt"], tz) - now))

    if "main" not in today_data or "temp" not in today_data["main"]:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç 'main' –∏–ª–∏ 'temp'! {today_data}")
        return None

    weather_data = extract_weather_data(today_data)
    tracked_params = decode_tracked_params(user.tracked_weather_params)
    filtered_weather_data = {}

    for key, value in weather_data.items():
        if tracked_params.get(key, False) and value is not None:
            filtered_weather_data[key] = value
        else:
            logging.debug(f"–ö–ª—é—á {key} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {value}")

    temp_min = weather_data.get("temp_min", weather_data["temp"])
    temp_max = weather_data.get("temp_max", weather_data["temp"])
    filtered_weather_data["temp_min"] = min(filtered_weather_data.get("temp_min", float("inf")), temp_min)
    filtered_weather_data["temp_max"] = max(filtered_weather_data.get("temp_max", float("-inf")), temp_max)

    filtered_weather_data["descriptions"] = descriptions

    day_name = WEEKDAYS_RU[today.strftime("%A")]
    date_formatted = f"{today.day} {MONTHS_RU[today.month]}"
    filtered_weather_data.update({
        "date": date_formatted,
        "day_name": day_name
    })

    return filtered_weather_data



def get_tomorrow_forecast(city, user):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    raw_data = fetch_tomorrow_forecast(city)
    if not raw_data or not user.timezone:
        return None
    try:
        user_tz = ZoneInfo(user.timezone)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–π–º–∑–æ–Ω—ã: {e}")
        return None
    now_local = datetime.now(user_tz)
    tomorrow_date = (now_local + timedelta(days=1)).date()
    tomorrow_entries = []
    descriptions = [] 
    for entry in raw_data:
        entry_dt_utc = datetime.fromtimestamp(entry["dt"], tz=timezone.utc)
        entry_dt_local = entry_dt_utc.astimezone(user_tz)
        if entry_dt_local.date() == tomorrow_date:
            tomorrow_entries.append(entry)
            if "weather" in entry and entry["weather"]:
                descriptions.append(entry["weather"][0]["description"])
    if not tomorrow_entries:
        return None
    day_name = WEEKDAYS_RU[tomorrow_date.strftime("%A")]
    date_formatted = f"{tomorrow_date.day} {MONTHS_RU[tomorrow_date.month]}"
    tracked_params = decode_tracked_params(user.tracked_weather_params)
    filtered_weather_data = {}
    temp_min = float("inf")
    temp_max = float("-inf")
    for entry in tomorrow_entries:
        if "main" not in entry or "temp" not in entry["main"]:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç 'main' –∏–ª–∏ 'temp'! {entry}")
            continue
        weather_data = extract_weather_data(entry)
        for key, value in weather_data.items():
            if tracked_params.get(key, False) and value is not None:
                filtered_weather_data[key] = value
        temp = weather_data.get("temp")
        if temp is not None:
            temp_min = min(temp_min, temp)
            temp_max = max(temp_max, temp)
    if temp_min == float("inf"):
        temp_min = None
    if temp_max == float("-inf"):
        temp_max = None
    filtered_weather_data.update({
        "temp_min": temp_min,
        "temp_max": temp_max,
        "date": date_formatted,
        "day_name": day_name,
        "descriptions": descriptions  
    })
    return filtered_weather_data


def get_weekly_forecast(city, user):
    """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —É—á—ë—Ç–æ–º tracked_weather_params"""
    raw_data = fetch_weekly_forecast(city)
    if not raw_data:
        return None  
    daily_data = {}
    today = date.today()
    start_date = today + timedelta(days=1)
    tracked_params = decode_tracked_params(user.tracked_weather_params)
    for entry in raw_data:
        timestamp = entry["dt"] 
        date_obj = datetime.fromtimestamp(timestamp).date()
        day_name = WEEKDAYS_RU[date_obj.strftime("%A")]

        if date_obj < start_date or (date_obj - start_date).days >= 5:
            continue
        if "main" not in entry or "temp" not in entry["main"]:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç 'main' –∏–ª–∏ 'temp'! {entry}")
            continue
        weather_data = extract_weather_data(entry)
        if date_obj not in daily_data:
            daily_data[date_obj] = {
                "day_name": day_name,
                "descriptions": [], 
                **{
                    key: value for key, value in weather_data.items() if key in tracked_params and tracked_params[key]
                }
            }
        daily_data[date_obj]["temp_min"] = min(daily_data[date_obj].get("temp_min", float("inf")), weather_data["temp"])
        daily_data[date_obj]["temp_max"] = max(daily_data[date_obj].get("temp_max", float("-inf")), weather_data["temp"])
        if "weather" in entry and entry["weather"]:
            daily_data[date_obj]["descriptions"].append(entry["weather"][0]["description"])
    return [
        {
            "date": f"{date.day} {MONTHS_RU[date.month]}",
            "day_name": data["day_name"],
            **data
        }
        for date, data in sorted(daily_data.items())
    ]


def get_forecast_emoji(description):
    description = description.lower()
    for key, emoji in WEATHER_EMOJI_MAP.items():
        if key in description:
            return emoji
    return "üå¶" 


def get_most_severe_description(descriptions):
    def score(desc):
        for key, val in SEVERITY_MAP.items():
            if key in desc.lower():
                return val
        return 0
    return max(descriptions, key=score)


MAX_GAP_HOURS = 3


def group_bad_weather_periods(bad_weather_periods):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –ø–ª–æ—Ö–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã."""
    if not bad_weather_periods:
        return []

    groups = []
    current_group = [bad_weather_periods[0]]

    for i in range(1, len(bad_weather_periods)):
        prev_time, _ = bad_weather_periods[i-1]
        curr_time, _ = bad_weather_periods[i]
        if (curr_time - prev_time) <= timedelta(hours=MAX_GAP_HOURS):
            current_group.append(bad_weather_periods[i])
        else:
            groups.append(current_group)
            current_group = [bad_weather_periods[i]]

    groups.append(current_group)
    return groups



def get_weather_summary_description(forecast_data, user):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏ –≤—ã–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ —á–µ—Å—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ –ø–æ–≥–æ–¥—ã."""
    tz = ZoneInfo(user.timezone or "UTC")
    now = datetime.now(tz)
    today = now.date()

    # –°–æ–±–∏—Ä–∞–µ–º –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    bad_weather_periods = []
    for entry in forecast_data:
        timestamp = datetime.fromtimestamp(entry["dt"], tz)
        if timestamp.date() != today:
            continue
        if timestamp < now - timedelta(hours=1):  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ä—å—ë
            continue

        description = entry["weather"][0]["description"].capitalize()
        if description in BAD_WEATHER_DESCRIPTIONS:
            bad_weather_periods.append((timestamp, description))

    if not bad_weather_periods:
        return "üå§ –°–µ–≥–æ–¥–Ω—è –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è!"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    groups = group_bad_weather_periods(bad_weather_periods)

    # –ò—â–µ–º –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è –ª–∏–±–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –ª–∏–±–æ –±–ª–∏–∂–∞–π—à–∞—è
    for group in groups:
        start_time, start_desc = group[0]
        end_time, end_desc = group[-1]

        if now <= end_time:
            main_description = get_most_severe_description([desc for _, desc in group])
            emoji = get_forecast_emoji(main_description)

            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Å–ª–æ—Ç–∞
            if start_time != end_time:
                start_str = start_time.strftime("%H:%M")
                end_str = end_time.strftime("%H:%M")
                return f"{emoji} {main_description} –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å {start_str} –¥–æ {end_str}."
            else:
                start_str = start_time.strftime("%H:%M")
                return f"{emoji} {main_description} –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ {start_str}."

    return "üå§ –°–µ–≥–æ–¥–Ω—è –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è!"