import requests
import json
import time
import logging
from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
import telebot
import os
from dotenv import load_dotenv
from models import CheckedCities, User
from functools import wraps
import threading
import random

TEST = False #—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (True - –≤–∫–ª, False - –≤—ã–∫–ª.)
test_weather_data = None

load_dotenv()

if not os.path.exists("logs"):
    os.makedirs("logs")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/weather_checker.log", encoding="utf-8"),
        logging.StreamHandler()                                                                                                                                 
    ]
)

logging.info("üöÄ –ß–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ logs/weather_checker.log")

last_log_time = time.time()

DB_URL = os.getenv("DATABASE_URL")
engine = create_engine(DB_URL, echo=False)
Session = sessionmaker(bind=engine)

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

def safeexecute(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.critical(f"üî• –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
            return None
    return wrapper

@safeexecute
def get_weather_data(city):
    global test_weather_data

    if TEST:
        if test_weather_data is None:
            logging.warning("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤.")
            test_weather_data = {
                "temperature": round(random.uniform(-30, 40), 1),
                "humidity": random.randint(10, 100),
                "wind_speed": round(random.uniform(0, 25), 1),
                "description": random.choice(["—è—Å–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "–≥—Ä–æ–∑–∞"]),
                "pressure": random.randint(950, 1050),
                "visibility": random.randint(100, 10000)
            }
        return test_weather_data 

    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv('WEATHER_API_KEY')}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}: {e}")
        return None
    resp_data = response.json()
    if resp_data.get("cod") != 200:
        logging.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è {city}: {resp_data}")
        return None
    return {
        "temperature": round(resp_data["main"]["temp"], 1),
        "humidity": round(resp_data["main"]["humidity"]),
        "wind_speed": round(resp_data["wind"]["speed"], 1),
        "description": resp_data["weather"][0]["description"],
        "pressure": round(resp_data["main"]["pressure"] * 0.75006),
        "visibility": resp_data.get("visibility", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    }

@safeexecute
def watchdog_timer():
    global last_log_time
    while True:
        time.sleep(3600 + 60)
        if time.time() - last_log_time > 3600 + 50:
            logging.critical("‚è≥ –ß–µ–∫–µ—Ä –∑–∞–≤–∏—Å! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
            os._exit(1)

@safeexecute
def update_last_log():
    global last_log_time
    last_log_time = time.time()

threading.Thread(target=watchdog_timer, daemon=True).start()

@safeexecute
def check_weather_changes_for_city(city):
    session = Session()
    current_data = get_weather_data(city)
    if not current_data:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        session.close()
        return
    
    def format_change(label, old_value, new_value, unit=""):
        if old_value is None or old_value != new_value:
            arrow = "üìà" if new_value > old_value else "üìâ"
            return f"**{label}: {new_value}{unit} {arrow}**"
        return f"{label}: {new_value}{unit}"

    
    now = datetime.utcnow()
    city_record = session.query(CheckedCities).filter_by(city_name=city).first()
    
    if city_record and city_record.last_checked:
        time_diff = now - city_record.last_checked
        logging.info(f"üìç {city} | –ü—Ä–æ–≤–µ—Ä–∫–∞: {now} (—Ä–∞–∑–Ω–∏—Ü–∞ {time_diff})")
        if time_diff < timedelta(minutes=0):
            logging.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {city}, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ")
            session.close()
            return

    significant_change = False
    if city_record:
        temp_diff = abs(current_data["temperature"] - city_record.temperature)
        humidity_diff = abs(current_data["humidity"] - (city_record.last_humidity or 0))
        wind_diff = abs(current_data["wind_speed"] - (city_record.last_wind_speed or 0))
        pressure_diff = abs(current_data["pressure"] - (city_record.pressure or 0))
        visibility_diff = abs(current_data["visibility"] - (city_record.visibility or 0))
        logging.info(f"üå° {city} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {city_record.temperature}¬∞C ‚Üí {current_data['temperature']}¬∞C (ŒîT: {temp_diff}¬∞C)")
        logging.info(f"üå• {city} | –ü–æ–≥–æ–¥–∞: {city_record.description} ‚Üí {current_data['description']}")
        logging.info(f"üíß {city} | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {city_record.last_humidity}% ‚Üí {current_data['humidity']}% (ŒîH: {humidity_diff}%)")
        logging.info(f"üí® {city} | –í–µ—Ç–µ—Ä: {city_record.last_wind_speed} –º/—Å ‚Üí {current_data['wind_speed']} –º/—Å (ŒîW: {wind_diff} –º/—Å)")
        logging.info(f"üìä {city} | –î–∞–≤–ª–µ–Ω–∏–µ: {city_record.pressure} –º–º ‚Üí {current_data['pressure']} –º–º (ŒîP: {pressure_diff} –º–º)")
        logging.info(f"üëÄ {city} | –í–∏–¥–∏–º–æ—Å—Ç—å: {city_record.visibility} –º ‚Üí {current_data['visibility']} –º (ŒîV: {visibility_diff} –º)")

        if temp_diff >= 3 or humidity_diff >= 10 or wind_diff > 2:
            significant_change = True
    else:
        significant_change = False

    if significant_change:
        alert_message = (f"üîî *–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–≥–æ–¥–∞ –≤ –≥.{city} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!*\n"
                 f"\n"
                 f"‚ñ∏ –ü–æ–≥–æ–¥–∞: *{current_data['description'].capitalize()}*\n"
                 f"{format_change('‚ñ∏ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', city_record.temperature, current_data['temperature'], '¬∞C')}\n"
                 f"{format_change('‚ñ∏ –í–ª–∞–∂–Ω–æ—Å—Ç—å', city_record.last_humidity, current_data['humidity'], '%')}\n"
                 f"{format_change('‚ñ∏ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞', city_record.last_wind_speed, current_data['wind_speed'], ' –º/—Å')}\n"
                 f"{format_change('‚ñ∏ –î–∞–≤–ª–µ–Ω–∏–µ', city_record.pressure, current_data['pressure'], ' –º–º')}\n"
                 f"{format_change('‚ñ∏ –í–∏–¥–∏–º–æ—Å—Ç—å', city_record.visibility, current_data['visibility'], ' –º')}")
        users = session.query(User).filter(User.preferred_city == city, User.notifications_enabled == True).all()
        for user in users:
            try: 
                bot.send_message(user.user_id, alert_message, parse_mode="Markdown")
                logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.user_id} ({city})")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user.user_id}: {e}")

    if city_record:
        city_record.last_humidity = current_data["humidity"]
        city_record.last_wind_speed = current_data["wind_speed"]
        city_record.temperature = current_data["temperature"]
        city_record.weather_info = json.dumps(current_data, ensure_ascii=False)
        city_record.pressure = current_data["pressure"]
        city_record.visibility = current_data["visibility"]
        city_record.description = current_data["description"]
        city_record.last_checked = now

    else:
        new_record = CheckedCities(
            city_name=city,
            weather_info=json.dumps(current_data, ensure_ascii=False),
            temperature=current_data["temperature"],
            last_checked=now,
            last_humidity=current_data["humidity"],
            last_wind_speed=current_data["wind_speed"]
        )
        session.add(new_record)
    session.commit()
    session.close()
    return True

@safeexecute
def check_all_cities():
    session = Session()
    cities = session.query(User.preferred_city).filter(User.notifications_enabled == True).distinct().all()
    session.close()

    cities = {city[0] for city in cities if city[0]}  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    checked_cities = set()  # –•—Ä–∞–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞

    attempt = 1
    max_attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞

    while cities - checked_cities and attempt <= max_attempts:
        remaining_cities = cities - checked_cities  # –ì–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã

        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(remaining_cities)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–æ—Ä–æ–¥–æ–≤...")

        for city in remaining_cities:
            success = check_weather_changes_for_city(city)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥

            if success:
                checked_cities.add(city)  # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
                logging.info(f"‚úÖ {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.")

        attempt += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    if cities - checked_cities:
        logging.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {cities - checked_cities}")

@safeexecute
def notify_admin(message):
    ADMIN_ID = os.getenv("ADMIN_ID")
    if ADMIN_ID:
        try:
            bot.send_message(ADMIN_ID, f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! {message}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

if __name__ == '__main__':
    while True:
        try:
            logging.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã...")
            check_all_cities()
            logging.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
        except Exception as e:
            logging.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            notify_admin(f"–ß–µ–∫–µ—Ä —É–ø–∞–ª! –û—à–∏–±–∫–∞: {e}") 
        now = datetime.utcnow()
        next_run = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        sleep_time = max(0, (next_run - now).total_seconds())
        logging.info(f"üïí –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {round(sleep_time)} —Å–µ–∫—É–Ω–¥ ({next_run})")
        time.sleep(sleep_time)