#–ò–ú–û–ü–†–¢–´
import json
import time
import logging
import telebot
import os
import random

from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from functools import wraps
from models import CheckedCities, User, Base
from logic import safe_execute, convert_pressure, convert_temperature, convert_wind_speed, decode_tracked_params
from logic import UNIT_TRANSLATIONS, get_all_users, decode_notification_settings, get_wind_direction
from weather import get_weather
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine    
from threading import Event
from logging.handlers import RotatingFileHandler
from bot import get_data_field, update_data_field, send_main_menu, send_settings_menu, get_today_forecast, format_forecast
from zoneinfo import ZoneInfo

#–ü–ï–†–ï–ú–ï–ù–ù–´–ï
old_start_time = None
last_start_time = None
test_weather_data = None
last_log_time = time.time()
timer_start_time = time.time()
rounded_time = datetime.fromtimestamp(round(timer_start_time), timezone.utc)

#–û–¢–õ–ê–î–ö–ê
TEST = False  #—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (True - –≤–∫–ª, False - –≤—ã–∫–ª.)

#–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

#–®–ò–§–†–û–í–ê–ù–ò–ï
load_dotenv()

#–°–õ–û–í–ê–†–ò
stop_event = Event()

#–õ–û–ì–ò–†–û–í–ê–ù–ò–ï
LOG_DIR = "logs"
LOG_FILE = os.path.join(LOG_DIR, "timer.log")

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOG_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"

timer_logger = logging.getLogger("timer_logger")
timer_logger.setLevel(logging.DEBUG)
timer_logger.propagate = False 

if timer_logger.hasHandlers():
    timer_logger.handlers.clear()

file_handler = RotatingFileHandler(LOG_FILE, maxBytes=10 * 1024 * 1024, backupCount=5, encoding="utf-8")
file_handler.setFormatter(logging.Formatter(LOG_FORMAT))
file_handler.setLevel(logging.DEBUG)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
console_handler.setLevel(logging.DEBUG)

error_handler = logging.FileHandler(os.path.join(LOG_DIR, "errors_timer.log"), encoding="utf-8")
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(logging.Formatter(LOG_FORMAT))

timer_logger.addHandler(file_handler)
timer_logger.addHandler(console_handler)
timer_logger.addHandler(error_handler)

timer_logger.debug("üîç DEBUG-–ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
timer_logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")

#–ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –ë–û–¢–ê
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"), parse_mode="HTML", threaded=False)

#–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó API
@safe_execute
def check_weather_changes(city, current_data):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = SessionLocal()
    try:
        timer_logger.info(f"üìç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
        
        if TEST:
            # –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            current_data = {
                "temp": round(random.uniform(-10, 40), 1),
                "feels_like": round(random.uniform(-10, 40), 1),
                "humidity": random.randint(10, 100),
                "wind_speed": round(random.uniform(0, 10), 1),
                "wind_direction": random.randint(0, 25),
                "wind_gust": round(random.uniform(0, 10), 1),
                "pressure": random.randint(950, 1200),
                "visibility": random.randint(1000, 10000),
                "clouds": random.randint(0, 100),
                "description": random.choice(["–ì—Ä–æ–∑–∞", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", "–°–æ–ª–Ω–µ—á–Ω–æ"])
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        users = db.query(User).filter(User.preferred_city == city).all()
        users_with_notifications = [
            user for user in users if decode_notification_settings(user.notifications_settings).get("weather_threshold_notifications", False)
        ]
        if not users_with_notifications:
            timer_logger.info(f"‚ñ∏ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return True

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –≥–æ—Ä–æ–¥–µ –≤ –ë–î
        city_data = db.query(CheckedCities).filter_by(city_name=city).first()
        if not city_data:
            new_entry = CheckedCities(
                city_name=city,
                temperature=current_data["temp"],
                feels_like=current_data["feels_like"],
                humidity=current_data["humidity"],
                wind_speed=current_data["wind_speed"],
                wind_direction=current_data["wind_direction"],
                wind_gust=current_data["wind_gust"],
                pressure=current_data["pressure"],
                visibility=current_data["visibility"],
                clouds=current_data["clouds"],
                description=current_data["description"],
                last_temperature=current_data["temp"],
                last_feels_like=current_data["feels_like"],
                last_humidity=current_data["humidity"],
                last_wind_speed=current_data["wind_speed"],
                last_wind_direction=current_data["wind_direction"],
                last_wind_gust=current_data["wind_gust"],
                last_pressure=current_data["pressure"],
                last_visibility=current_data["visibility"],
                last_clouds=current_data["clouds"],
                last_description=current_data["description"]
            )
            db.add(new_entry)
            db.commit()
            timer_logger.info(f"‚úÖ –ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.")
            return True
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        notify_users = False
        changed_params = {}
        for param in current_data:
            if param in ["city_name", "coordinates", "wind_direction", "clouds"]:
                continue

            old_value = getattr(city_data, f"last_{param}", None)
            new_value = current_data[param]

            if param == "description":
                important_descriptions = [
                    "–ü—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å", "–ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å", "–°–Ω–µ–≥", "–ì—Ä–∞–¥",
                    "–ì—Ä–æ–∑–∞", "–®—Ç–æ—Ä–º", "–ë—É—Ä—è", "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä", "–ü—ã–ª—å–Ω–∞—è –±—É—Ä—è",
                    "–õ–∏–≤–µ–Ω—å", "–î–æ–∂–¥—å", "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥"
                ]
                old_desc, new_desc = old_value, new_value

                if old_desc != new_desc and isinstance(new_desc, str):
                    if new_desc.lower() in [desc.lower() for desc in important_descriptions]:
                        changed_params[param] = (old_desc, new_desc)
                        notify_users = True
            else:
                try:
                    old_value = float(old_value) if old_value is not None else None
                    new_value = float(new_value) if new_value is not None else None
                except (ValueError, TypeError):
                    continue

                if old_value is not None and new_value is not None and abs(new_value - old_value) > get_threshold(param):
                    changed_params[param] = (old_value, new_value)
                    notify_users = True

        if notify_users:
            timer_logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {changed_params}")
            send_weather_update(users_with_notifications, city, changed_params, current_data)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ –±–∞–∑–µ
        for param in current_data:
            setattr(city_data, f"last_{param}", getattr(city_data, param, None))
            setattr(city_data, param, current_data[param])

        db.commit()
        timer_logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ {city} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        return True

    except Exception as e:
        db.rollback()
        timer_logger.error(f"‚ú¶ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞ {city}: {e}")
        return False

    finally:
        db.close()
        timer_logger.info(f"‚ñ∏ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –∑–∞–∫—Ä—ã—Ç–æ.")


def get_threshold(param):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    thresholds = {
        "temperature": 3.0,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 2¬∞C
        "humidity": 15,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞ 10%
        "wind_speed": 2,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –Ω–∞ 2 –º/—Å
        "wind_gust": 2,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –Ω–∞ 2 –º/—Å
        "pressure": 5,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ 5 –º–º —Ä—Ç. —Å—Ç.
        "visibility": 4000,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 500 –º
        "feels_like": 3.0,
        "clouds": 20,
        "description": [
                    "–ü—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å", "–ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–ª–∏–≤–Ω–æ–π –¥–æ–∂–¥—å", "–°–Ω–µ–≥",
                    "–ì—Ä–∞–¥", "–ì—Ä–æ–∑–∞", "–®—Ç–æ—Ä–º", "–ë—É—Ä—è", "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä",
                    "–ü—ã–ª—å–Ω–∞—è –±—É—Ä—è", "–õ–∏–≤–µ–Ω—å","–î–æ–∂–¥—å","–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥"
                    ]
    }
    return thresholds.get(param, 0)

def send_weather_update(users, city, changes, current_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –ø–æ–≥–æ–¥–µ, –∏—Å–∫–ª—é—á–∞—è –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ."""
    for user in users:
        tracked_params = decode_tracked_params(user.tracked_weather_params)

        if not any(tracked_params.values()):
            timer_logger.info(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} ‚Äî –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            continue
        chat_id = user.user_id

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
        last_menu_id = get_data_field("last_menu_message", chat_id)
        if last_menu_id:
            try:
                bot.delete_message(chat_id, last_menu_id)
                update_data_field("last_menu_message", chat_id, None)
                timer_logger.debug(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
            except Exception as e:
                timer_logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {e}")

        def get_weather_emoji(current_data, changes):
            """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã."""

            priority = {
                "storm": (5, "‚õàÔ∏è"),  # –ì—Ä–æ–∑–∞, –±—É—Ä—è
                "hurricane_wind": (5, "üå™Ô∏è"),  # –£—Ä–∞–≥–∞–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä (15+ –º/—Å)
                "extreme_heat": (5, "üî•"),  # –û—á–µ–Ω—å –∂–∞—Ä–∫–æ (30+¬∞C)
                "extreme_cold": (5, "‚ùÑÔ∏è"),  # –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ (-15¬∞C)
                "pressure_drop": (5, "‚ÄºÔ∏è"),  # –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è

                "strong_wind": (4, "üí®"),  # –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä (10-15 –º/—Å)
                "heavy_rain": (4, "‚òî"),  # –õ–∏–≤–µ–Ω—å
                "big_temp_change": (4, "üå°Ô∏è"),  # –†–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬±10¬∞C)
                "low_visibility": (4, "üå´Ô∏è"),  # –°–∏–ª—å–Ω—ã–π —Ç—É–º–∞–Ω

                "cloudy": (3, "üå¶Ô∏è"),  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
                "humidity_increase": (2, "üíß"),  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (80+%)
                "small_pressure_change": (2, "üìâ"),  # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
            }

            detected_events = []

            if "wind_speed" in changes:
                old, new = changes["wind_speed"]
                if new >= 15:
                    detected_events.append("hurricane_wind")
                elif new >= 10:
                    detected_events.append("strong_wind")

            if "temp" in changes:
                old, new = changes["temp"]
                diff = abs(new - old)
                if new >= 30:
                    detected_events.append("extreme_heat")
                elif new <= -15:
                    detected_events.append("extreme_cold")
                elif diff >= 10:
                    detected_events.append("big_temp_change")

            if "pressure" in changes:
                old, new = changes["pressure"]
                if abs(new - old) > 15:
                    detected_events.append("pressure_drop")
                elif abs(new - old) > 5:
                    detected_events.append("small_pressure_change")

            if "description" in current_data:
                description = current_data["description"].lower()
                if "–≥—Ä–æ–∑–∞" in description or "–±—É—Ä—è" in description:
                    detected_events.append("storm")
                if "–¥–æ–∂–¥—å" in description and "–ª–∏–≤–µ–Ω—å" in description:
                    detected_events.append("heavy_rain")

            if "visibility" in changes:
                old, new = changes["visibility"]
                if new < 1000:
                    detected_events.append("low_visibility")

            if detected_events:
                highest_priority_event = max(detected_events, key=lambda event: priority[event][0])
                return priority[highest_priority_event][1]

            return "üå¶Ô∏è" 
        
        emoji = get_weather_emoji(current_data, changes)
        header = f"<blockquote>{emoji} –í–Ω–∏–º–∞–Ω–∏–µ!                              </blockquote>\n–ü–æ–≥–æ–¥–∞ –≤ –≥.{city} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!"
        line = "‚îÄ" * min(len(header), 21)
        message = f"<b>{header}</b>\n{line}\n"

        params = {
            "description": ("–ü–æ–≥–æ–¥–∞", current_data["description"], ""),
            "temperature": ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", convert_temperature(current_data["temp"], user.temp_unit), UNIT_TRANSLATIONS["temp"].get(user.temp_unit, "¬∞C")),
            "feels_like": ("–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫", convert_temperature(current_data["feels_like"], user.temp_unit), UNIT_TRANSLATIONS["temp"].get(user.temp_unit, "¬∞C")),
            "humidity": ("–í–ª–∞–∂–Ω–æ—Å—Ç—å", int(current_data["humidity"]), "%"),
            "precipitation": ("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤", int(current_data.get("precipitation", 0)), "%"),
            "pressure": ("–î–∞–≤–ª–µ–Ω–∏–µ", convert_pressure(current_data["pressure"], user.pressure_unit), UNIT_TRANSLATIONS["pressure"].get(user.pressure_unit, " –º–º —Ä—Ç.")),
            "wind_speed": ("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞", convert_wind_speed(current_data["wind_speed"], user.wind_speed_unit), UNIT_TRANSLATIONS["wind_speed"].get(user.wind_speed_unit, " –º/—Å")),
            "wind_direction": ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞", f"{get_wind_direction(current_data['wind_direction'])} ({current_data['wind_direction']}¬∞)", ""),
            "wind_gust": ("–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞", convert_wind_speed(current_data.get("wind_gust", 0), user.wind_speed_unit), UNIT_TRANSLATIONS["wind_speed"].get(user.wind_speed_unit, " –º/—Å")),
            "clouds": ("–û–±–ª–∞—á–Ω–æ—Å—Ç—å", current_data.get("clouds", 0), "%"),
            "visibility": ("–í–∏–¥–∏–º–æ—Å—Ç—å", int(current_data.get("visibility", 0)), " –º")
        }

        formatted_params = {} 

        for param, value in current_data.items():
            if param == "temperature":
                translated_unit = UNIT_TRANSLATIONS["temp"].get(user.temp_unit, user.temp_unit)
                formatted_value = round(convert_temperature(value, user.temp_unit), 1)
                formatted_params[param] = f"{formatted_value} {translated_unit}"
            elif param == "feels_like":
                translated_unit = UNIT_TRANSLATIONS["temp"].get(user.temp_unit, user.temp_unit)
                formatted_value = round(convert_temperature(value, user.temp_unit), 1)
                formatted_params[param] = f"{formatted_value} {translated_unit}"
            elif param == "pressure":
                translated_unit = UNIT_TRANSLATIONS["pressure"].get(user.pressure_unit, user.pressure_unit)
                formatted_params[param] = f"{convert_pressure(value, user.pressure_unit)} {translated_unit}"
            elif param == "wind_speed":
                translated_unit = UNIT_TRANSLATIONS["wind_speed"].get(user.wind_speed_unit, user.wind_speed_unit)
                formatted_params[param] = f"{convert_wind_speed(value, user.wind_speed_unit)} {translated_unit}"
            elif param == "wind_gust":
                translated_unit = UNIT_TRANSLATIONS["wind_speed"].get(user.wind_speed_unit, user.wind_speed_unit)
                formatted_params[param] = f"{convert_wind_speed(value, user.wind_speed_unit)} {translated_unit}"
            elif param == "visibility":
                formatted_params[param] = f"{int(value)} –º"
            elif param in ("humidity", "precipitation"):
                formatted_params[param] = f"{int(value)}%"
            elif param == "description":
                formatted_params[param] = value.capitalize()

        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for param, (label, value, unit) in params.items():
            if not tracked_params.get(param, False):
                continue

            arrow = "‚ñ∏" 
            value_str = formatted_params.get(param, f"{value}{unit}") 

            if param in changes:
                old, new = changes[param]
                trend_emoji = "‚áë" if new > old else "‚áì"

                if param == "description":
                    important_descriptions = get_threshold("description")
                    if old != new:
                        if old in important_descriptions or new in important_descriptions:
                            value_str = f"<b>{old.capitalize()} ‚ûù {new.capitalize()}</b>"
                            arrow = "‚áë"
                        else:
                            value_str = f"{old.capitalize()} ‚ûù {new.capitalize()}"
                        arrow = ""
                elif param == "feels_like":
                    old = round(convert_temperature(old, user.temp_unit), 1)
                    new = round(convert_temperature(new, user.temp_unit), 1)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new}{unit}</b>"
                        arrow = "‚áë" if new > old else "‚áì"
                    else:
                        arrow = ""
                elif param == "temperature":
                    old = round(convert_temperature(old, user.temp_unit), 1)
                    new = round(convert_temperature(new, user.temp_unit), 1)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new}{unit}</b>"
                        arrow = "‚áë" if new > old else "‚áì"
                    else:
                        arrow = ""
                elif param == "pressure":
                    old = convert_pressure(old, user.pressure_unit)
                    new = convert_pressure(new, user.pressure_unit)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new} {unit}</b>"

                elif param == "wind_speed":
                    old = convert_wind_speed(old, user.wind_speed_unit)
                    new = convert_wind_speed(new, user.wind_speed_unit)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new} {unit}</b>"

                elif param == "wind_gust":
                    old = convert_wind_speed(old, user.wind_speed_unit)
                    new = convert_wind_speed(new, user.wind_speed_unit)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new} {unit}</b>"

                elif param == "visibility":
                    old, new = int(old), int(new)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new} –º</b>"

                elif param in ("humidity", "precipitation"):
                    old, new = int(old), int(new)
                    if old != new:
                        value_str = f"<b>{old} ‚ûù {new}{unit}</b>"

                arrow = trend_emoji

            message += f"{arrow} {label}: {value_str}\n"

        message += "\n      ‚ü™ Deus Weather ‚ü´"

        bot.send_message(user.user_id, message, parse_mode="HTML")
        timer_logger.info(f"‚ñ∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {message}\n")

        if get_data_field("last_settings_command", chat_id):
            send_settings_menu(chat_id)
            timer_logger.debug(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
        else:
            send_main_menu(chat_id)
            timer_logger.debug(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")

@safe_execute
def check_all_cities():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    db = SessionLocal()
    users = db.query(User.preferred_city, User.notifications_settings).distinct().all()
    cities = set()
    for city, settings in users:
        if city:
            decoded_settings = decode_notification_settings(settings)
            if decoded_settings.get("weather_threshold_notifications", False):
                cities.add(city)
    checked_cities = set()
    attempt = 1
    max_attempts = 3
    while cities - checked_cities and attempt <= max_attempts:
        remaining_cities = cities - checked_cities 
        timer_logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(remaining_cities)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–æ—Ä–æ–¥–æ–≤...")
        for city in remaining_cities:
            weather_data = get_weather(city)
            if weather_data:
                success = check_weather_changes(city, weather_data)
                if success:
                    checked_cities.add(city)  
                    timer_logger.info(f"‚úÖ {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.\n")
        attempt += 1  
    if cities - checked_cities:
        timer_logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {cities - checked_cities}")
    db.close() 


#–¢–ê–ô–ú–ï–† –ß–ï–ö–ï–†–ê
@safe_execute
def should_run_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≥–æ–¥—ã (—Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç)."""
    global old_start_time

    now = datetime.now(timezone.utc)
    current_minute = now.minute
    current_half_hour = now.replace(minute=0 if current_minute < 30 else 30, second=0, microsecond=0)
    next_half_hour = current_half_hour + timedelta(minutes=30)
    remaining_time = (next_half_hour - now).total_seconds()
    test_interval = 1800  
    if old_start_time is None:
        timer_logger.info("üöÄ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.")
        old_start_time = current_half_hour.timestamp()
        return True, 0
    if time.time() - old_start_time < test_interval:
        timer_logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {remaining_time:.2f} —Å–µ–∫—É–Ω–¥.")
        return False, min(test_interval, remaining_time)
    timer_logger.info("üïí –ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã.")
    old_start_time = current_half_hour.timestamp()
    return True, 0


@safe_execute
def send_daily_forecast(test_time=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    users = get_all_users()
    timer_logger.info(f"‚ñ∏ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {len(users)}")
    now = test_time or datetime.now()
    for user in users:
        settings = decode_notification_settings(user.notifications_settings)
        if not settings.get("forecast_notifications", False):
            timer_logger.debug(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —É {user.user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        user_tz = ZoneInfo(user.timezone) if user.timezone else ZoneInfo("UTC")
        user_time = now.astimezone(user_tz)
        timer_logger.debug(f"‚ñ∏ {user.user_id} ({user.preferred_city}): {user_time} (–ª–æ–∫–∞–ª—å–Ω–æ–µ)")
        if user_time.hour == 6 and user_time.minute < 10:
            raw_forecast = get_today_forecast(user.preferred_city, user)         
            if not raw_forecast:
                timer_logger.warning(f"‚ö† `get_today_forecast` –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.preferred_city}!")
                continue
            updated_time = user_time.strftime("%H:%M")
            forecast_message = (
                "<blockquote>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</blockquote>\n"
                f"[–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {updated_time}]\n"
                + format_forecast(raw_forecast, user)
                + "\n\n      ‚ü™ Deus Weather ‚ü´"
            )
            last_forecast_id = get_data_field("last_daily_forecast", user.user_id)
            if last_forecast_id:
                try:
                    bot.delete_message(chat_id=user.user_id, message_id=last_forecast_id)
                    timer_logger.info(f"üóë –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.")
                except Exception as del_error:
                    timer_logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user.user_id}: {del_error}")
            try:
                sent_message = bot.send_message(
                    user.user_id, forecast_message, parse_mode="HTML"
                )
                update_data_field("last_daily_forecast", user.user_id, sent_message.message_id)
                timer_logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}.")
                try:
                    bot.pin_chat_message(
                        chat_id=user.user_id,
                        message_id=sent_message.message_id,
                        disable_notification=True,
                    )
                    timer_logger.info(f"üìå –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.")
                except Exception as pin_error:
                    timer_logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user.user_id}: {pin_error}")
            except Exception as e:
                timer_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {user.user_id}: {e}")


def update_daily_forecasts():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã."""
    users = get_all_users()
    now = datetime.now()
    timer_logger.info(f"‚ñ∏ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {len(users)}")

    for user in users:
        user_tz = ZoneInfo(user.timezone) if user.timezone else ZoneInfo("UTC")
        user_time = now.astimezone(user_tz)

        last_forecast_id = get_data_field("last_daily_forecast", user.user_id)
        if not last_forecast_id:
            timer_logger.debug(f"‚ö† –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {user.user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        raw_forecast = get_today_forecast(user.preferred_city, user)
        if not raw_forecast:
            timer_logger.warning(f"‚ö† `get_today_forecast` –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.preferred_city}.")
            continue

        updated_time = user_time.strftime("%H:%M")
        forecast_message = (
            "<blockquote>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</blockquote>\n"
            f"[–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {updated_time}]\n"
            + format_forecast(raw_forecast, user)
            + "\n\n      ‚ü™ Deus Weather ‚ü´"
        )
        try:
            bot.edit_message_text(
                forecast_message,
                chat_id=user.user_id,
                message_id=last_forecast_id,
                parse_mode="HTML",
            )
            timer_logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.")
        except Exception as e:
            timer_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ {user.user_id}: {e}")


if __name__ == '__main__':
    while True:
        run_check, wait_time = should_run_check()
        
        if run_check:
            timer_logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            
            check_all_cities()
            # –û–¢–õ–ê–î–ö–ê (TEST MODE)
            # user_tz = ZoneInfo("Asia/Almaty")
            # test_time = datetime(2025, 3, 26, 6, 0, 0, tzinfo=user_tz) 
            # send_daily_forecast(test_time)
            send_daily_forecast()
            update_daily_forecasts()
    
        else:
            timer_logger.info(f"‚è≥ –ñ–¥—ë–º {wait_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        
        time.sleep(wait_time)